
TODO list of Randoop improvements
=================================

These are not projects but rather smaller, straightforward
enhancements.  See doc/projects.txt and the Wiki projects page
(http://code.google.com/p/randoop/wiki/ProjectIdeas) for
larger potential projects.

* Clean up logging facilities: running Randoop with --log=<filename>
  option should result in a log file that contains useful (not
  cryptic) information.

* Figure out what the difference is between options
  randoop.Globals.nochecks and randoop.Globals.randooptestrun. Merge
  the options and write a new system test that runs Randoop with all
  the internal testing code related to these options being turned on.

* Remove regression assertions stating non-null return value for
  constructors (See randoop.test.SequenceTests test id 3 for an
  example of this regression being output)

* Add more kinds of regression assertions. For example, we used to
  call observers for objects and record the observations as
  assertions. That got lost at some point.

* Reimplement the failing test minimizer. Sanjukta Pal implemented a
  basic but difficult-to-understand version that was abandoned.

* Improve formatting of generated tests

  Remove unnecessary casts (lots of casts in the current output that were
  added by David Glasser at some point in the past).

  Replace boxed primitive declarations with primitive declarations, instead of
      Integer x = new Integer(3);
    Output
      int x = 3;

  Also, generate shorter code whenever possible: instead of
      Integer x = new Integer(3);
      foo(x);
    Output
      foo(3);


* Usage message improvements

  Group options in the source code in a more sensical manner.

  (plume task, but Randoop-related) Adding a @BeginOptionGroup
  annotation that specifies the delimits options thematically.

  Remove as many @Unpublicized options as possible (in general, not good
  to hide things - impairs understanding). Remove dead options (no
  longer used).

* Turn useful options on by default:

  --capture-output (separates Randoop output from code-under-test
  output) should be on by default? (But are we sure it is not
  confusing to hide the output from the user? We used to hide output
  generated by code under test from the user but this was sometimes
  confusing because there might be useful debugging information in
  such output.)

  --A basic Randoop agent that gets rid of System.exit(int) calls

  --usethreads=false by default would make Randoop much faster but
    introduce the possibility of infinite loops from code under test
    that make it appears as if the tool itself is not working.

* Documentation improvements

  Discuss and give examples of how a user can create more contracts.

  Discuss and give examples of how a user can specify primitive seed
  values.

  Discuss how to choose helper classes. Jeff says: "When trying to
  create tests, i would choose a class that i wanted tests for and
  then usually added most classes that appeared in any of the methods
  of the class I wished to test.  Not perfect, but it seemed pretty
  reasonable."

  Discuss the relationship between RandoopTest.java and other
  generated files.

  Add discussion of the most useful options including:
    usethreads
    capture_output
    javaagent:$(randoop)/randoop_agent.jar=--map_calls=map_calls.txt

  FAQ. Some starter questions:
    Randoop generates many tests that look similar
    Randoop does not output any tests
    Randoop runs out of memory
    Randoop does not generate any error-revealing tests
    Randoop does not generate any tests!
      Are you classes public?
    Randoop does not generate any tests for my method M!
      Is your method public?


Add option for Randoop to check exceptions. (Maybe this can be advertised as "Crasher Mode"?
