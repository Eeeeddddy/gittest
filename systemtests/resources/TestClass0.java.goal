package foo.bar;

import junit.framework.*;

public class TestClass0 extends TestCase {

  // Runs all the tests in this file.
  public static void main(String[] args) {
    junit.textui.TestRunner.run(TestClass0.class);
  }

  public void test1() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.contains((java.lang.Object)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test2() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)' ');
    java2.util2.Set var2 = java2.util2.Collections.unmodifiableSet(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test3() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)' ');
    boolean var3 = var0.containsAll((java2.util2.Collection)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test4() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.SortedSet var1 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test5() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    int var1 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);

  }

  public void test6() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Map var2 = java2.util2.Collections.singletonMap((java.lang.Object)var0, (java.lang.Object)(-1));
    java2.util2.Map var3 = java2.util2.Collections.synchronizedMap(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test7() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java.lang.Object var1 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test8() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.remove((java.lang.Object)10L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test9() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.TreeSet var1 = new java2.util2.TreeSet((java2.util2.Collection)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var1.toString(),"[]");

  }

  public void test10() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var1 = var0.last();
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");

  }

  public void test11() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Comparator var1 = var0.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test12() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.equals((java.lang.Object)1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test13() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.remove((java.lang.Object)'4');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test14() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var3 = java2.util2.Collections.singleton((java.lang.Object)var2);
    boolean var4 = var0.addAll((java2.util2.Collection)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1.0]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test15() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");

  }

  public void test16() throws Throwable {

    java2.util2.Comparator var0 = java2.util2.Collections.reverseOrder();
    java2.util2.TreeSet var1 = new java2.util2.TreeSet(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var1.toString(),"[]");

  }

  public void test17() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Map var2 = java2.util2.Collections.singletonMap((java.lang.Object)var0, (java.lang.Object)(short)0);
    java2.util2.Map var3 = java2.util2.Collections.synchronizedMap(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test18() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.TreeSet var1 = new java2.util2.TreeSet();
    java2.util2.Set var3 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var4 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var3);
    boolean var5 = var1.removeAll(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var6 = var0.headSet((java.lang.Object)var4);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var1.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test19() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    boolean var4 = var0.removeAll(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var5 = java2.util2.Collections.min((java2.util2.Collection)var0);
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test20() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java.lang.String var1 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));

  }

  public void test21() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Map var2 = java2.util2.Collections.singletonMap((java.lang.Object)var0, (java.lang.Object)(short)0);
    java2.util2.Map var3 = java2.util2.Collections.unmodifiableMap(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test22() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.TreeSet var1 = new java2.util2.TreeSet((java2.util2.SortedSet)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var1.toString(),"[]");

  }

  public void test23() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)' ');
    java2.util2.Comparator var2 = java2.util2.Collections.reverseOrder();
    java.lang.Object var3 = java2.util2.Collections.max((java2.util2.Collection)var1, var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ' '+ "'", var3.equals(' '));

  }

  public void test24() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var1 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test25() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.TreeSet var1 = new java2.util2.TreeSet();
    java2.util2.Map var3 = java2.util2.Collections.singletonMap((java.lang.Object)var1, (java.lang.Object)(-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var5 = var0.subSet((java.lang.Object)var1, (java.lang.Object)(-1.0f));
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var1.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test26() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.unmodifiableSet(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test27() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.SortedSet var2 = var0.headSet((java.lang.Object)(-1L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test28() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.contains((java.lang.Object)(-1L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test29() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.SortedSet var1 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test30() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    boolean var3 = var0.containsAll((java2.util2.Collection)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test31() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Enumeration var4 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    boolean var5 = var0.equals((java.lang.Object)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test32() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    java2.util2.Iterator var3 = var0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test33() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Comparator var2 = java2.util2.Collections.reverseOrder();
    java.lang.Object var3 = java2.util2.Collections.min((java2.util2.Collection)var1, var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + 10L+ "'", var3.equals(10L));

  }

  public void test34() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)var4, (-1), 1);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test35() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    java2.util2.Comparator var3 = var0.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test36() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Collections.sort((java2.util2.List)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test37() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var1 = var0.first();
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");

  }

  public void test38() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet();
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    boolean var8 = var4.removeAll(var7);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.max(var7, var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var11 = var0.subSet((java.lang.Object)1.0f, var10);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));

  }

  public void test39() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.Enumeration var6 = java2.util2.Collections.enumeration((java2.util2.Collection)var4);
    java2.util2.ArrayList var7 = java2.util2.Collections.list(var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var8 = var0.add((java.lang.Object)var6);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test40() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test41() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Comparator var5 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort((java2.util2.List)var4, var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test42() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.TreeSet var1 = new java2.util2.TreeSet();
    boolean var2 = var0.containsAll((java2.util2.Collection)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var1.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test43() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java.lang.Object var5 = java2.util2.Collections.min((java2.util2.Collection)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));

  }

  public void test44() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)var4, 0, 100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test45() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.copy((java2.util2.List)var4, (java2.util2.List)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test46() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var4 = var0.add((java.lang.Object)(byte)0);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test47() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Collections.shuffle((java2.util2.List)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test48() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.Comparator var3 = java2.util2.Collections.reverseOrder();
    java.lang.Object var4 = java2.util2.Collections.min((java2.util2.Collection)var1, var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + 1.0f+ "'", var4.equals(1.0f));

  }

  public void test49() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Collection var3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.min(var3, var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.max(var3, var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var3);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(var9, 1, 1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test50() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Collection var3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.min(var3, var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.max(var3, var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var3);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var10 = java2.util2.Collections.unmodifiableList(var9);
    java2.util2.Collections.rotate(var10, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test51() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    boolean var4 = var0.removeAll(var3);
    java2.util2.Comparator var5 = java2.util2.Collections.reverseOrder();
    java.lang.Object var6 = java2.util2.Collections.max(var3, var5);
    java.lang.Object var7 = java2.util2.Collections.min(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + 10L+ "'", var6.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));

  }

  public void test52() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var3 = var0.subSet((java.lang.Object)(byte)(-1), (java.lang.Object)"");
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");

  }

  public void test53() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)' ');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var7 = java2.util2.Collections.binarySearch((java2.util2.List)var4, (java.lang.Object)var6);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test54() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Collection var3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.min(var3, var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.max(var3, var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var3);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var11 = java2.util2.Collections.binarySearch(var9, (java.lang.Object)(-1));
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test55() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    java.lang.Object var3 = var0.last();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + 1+ "'", var3.equals(1));

  }

  public void test56() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    java.lang.Object var3 = var0.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + 1+ "'", var3.equals(1));

  }

  public void test57() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Collection var2 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    java.lang.Object var3 = java2.util2.Collections.min(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + 1.0f+ "'", var3.equals(1.0f));

  }

  public void test58() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Collection var3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.min(var3, var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.max(var3, var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var3);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var10 = java2.util2.Collections.unmodifiableList(var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var10, var11);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test59() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    int var3 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);

  }

  public void test60() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet();
    java.lang.Object[] var5 = new java.lang.Object[] { 100L};
    java.lang.Object[] var6 = var3.toArray(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var7 = var0.contains((java.lang.Object)var3);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test61() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.TreeSet var1 = new java2.util2.TreeSet();
    java2.util2.Set var3 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var4 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var3);
    java2.util2.Collection var5 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var3);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.min(var5, var6);
    java2.util2.Comparator var8 = java2.util2.Collections.reverseOrder();
    java.lang.Object var9 = java2.util2.Collections.max(var5, var8);
    java2.util2.Collection var10 = java2.util2.Collections.unmodifiableCollection(var5);
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)var5);
    boolean var12 = var1.containsAll(var5);
    boolean var13 = var0.retainAll((java2.util2.Collection)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var1.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 10L+ "'", var9.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test62() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)' ');
    java2.util2.Set var2 = java2.util2.Collections.synchronizedSet(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test63() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet();
    java.lang.Object[] var4 = var3.toArray();
    java2.util2.TreeSet var5 = new java2.util2.TreeSet();
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.max(var8, var9);
    boolean var11 = var5.containsAll(var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var12 = var0.subSet((java.lang.Object)var3, (java.lang.Object)var8);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test64() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Collection var3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.min(var3, var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.max(var3, var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var3);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var12 = java2.util2.Collections.binarySearch(var9, (java.lang.Object)(byte)100, var11);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test65() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Collection var3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.min(var3, var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.max(var3, var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var3);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var10 = java2.util2.Collections.unmodifiableList(var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.Set var17 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var17);
    java2.util2.Collection var19 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var17);
    java2.util2.Comparator var20 = java2.util2.Collections.reverseOrder();
    java.lang.Object var21 = java2.util2.Collections.min(var19, var20);
    java2.util2.Comparator var22 = java2.util2.Collections.reverseOrder();
    java.lang.Object var23 = java2.util2.Collections.max(var19, var22);
    java2.util2.Collection var24 = java2.util2.Collections.unmodifiableCollection(var19);
    java2.util2.List var25 = java2.util2.Collections.singletonList((java.lang.Object)var19);
    java2.util2.List var26 = java2.util2.Collections.unmodifiableList(var25);
    java2.util2.Collections.copy((java2.util2.List)var15, var25);
    java2.util2.TreeSet var28 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var15, (java.lang.Object)var28);
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.Collection var33 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var31);
    java2.util2.Comparator var34 = java2.util2.Collections.reverseOrder();
    java.lang.Object var35 = java2.util2.Collections.min(var33, var34);
    java2.util2.Comparator var36 = java2.util2.Collections.reverseOrder();
    java.lang.Object var37 = java2.util2.Collections.max(var33, var36);
    java2.util2.Collection var38 = java2.util2.Collections.unmodifiableCollection(var33);
    java2.util2.List var39 = java2.util2.Collections.singletonList((java.lang.Object)var33);
    java2.util2.Collections.copy((java2.util2.List)var15, var39);
    int var41 = java2.util2.Collections.indexOfSubList(var10, var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + 10L+ "'", var21.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + 10L+ "'", var23.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var28.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + 10L+ "'", var35.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + 10L+ "'", var37.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));

  }

  public void test66() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.TreeSet var5 = new java2.util2.TreeSet();
    java2.util2.TreeSet var6 = new java2.util2.TreeSet();
    java2.util2.Set var8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var8);
    boolean var10 = var6.removeAll(var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var9, var11);
    boolean var13 = var5.equals((java.lang.Object)var9);
    boolean var14 = var4.containsAll((java2.util2.Collection)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var6.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test67() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)var4, 10, 0);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test68() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Collection var3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.min(var3, var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.max(var3, var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var3);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.Enumeration var13 = java2.util2.Collections.enumeration((java2.util2.Collection)var11);
    java2.util2.ArrayList var14 = java2.util2.Collections.list(var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(var9, (java2.util2.List)var14);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test69() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    java2.util2.Set var3 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test70() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.max(var3, var4);
    boolean var6 = var0.containsAll(var3);
    java.lang.Object var7 = java2.util2.Collections.min(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));

  }

  public void test71() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Collections.rotate((java2.util2.List)var4, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test72() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    boolean var3 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test73() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var5 = var0.subSet((java.lang.Object)(byte)10, (java.lang.Object)(-1));
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test74() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    java.lang.String var3 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[1]"+ "'", var3.equals("[1]"));

  }

  public void test75() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Collection var3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.min(var3, var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.max(var3, var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var3);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var12 = java2.util2.Collections.binarySearch(var9, (java.lang.Object)100.0d, var11);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test76() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    java2.util2.SortedSet var4 = var0.headSet((java.lang.Object)'#');
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test77() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java2.util2.TreeSet var17 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var17);
    java2.util2.Set var20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var20);
    java2.util2.Collection var22 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var20);
    java2.util2.Comparator var23 = java2.util2.Collections.reverseOrder();
    java.lang.Object var24 = java2.util2.Collections.min(var22, var23);
    java2.util2.Comparator var25 = java2.util2.Collections.reverseOrder();
    java.lang.Object var26 = java2.util2.Collections.max(var22, var25);
    java2.util2.Collection var27 = java2.util2.Collections.unmodifiableCollection(var22);
    java2.util2.List var28 = java2.util2.Collections.singletonList((java.lang.Object)var22);
    java2.util2.Collections.copy((java2.util2.List)var4, var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)var4, (-1), (-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var17.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + 10L+ "'", var24.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + 10L+ "'", var26.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test78() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java2.util2.Comparator var17 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var14, var17);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test79() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    boolean var4 = var0.removeAll(var3);
    java2.util2.Comparator var5 = java2.util2.Collections.reverseOrder();
    java.lang.Object var6 = java2.util2.Collections.max(var3, var5);
    java2.util2.TreeSet var7 = new java2.util2.TreeSet(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + 10L+ "'", var6.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var7.toString(),"[10]");

  }

  public void test80() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.Enumeration var6 = java2.util2.Collections.enumeration((java2.util2.Collection)var4);
    java2.util2.ArrayList var7 = java2.util2.Collections.list(var6);
    java2.util2.Set var9 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    java2.util2.Collection var11 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var9);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.min(var11, var12);
    java2.util2.Comparator var14 = java2.util2.Collections.reverseOrder();
    java.lang.Object var15 = java2.util2.Collections.max(var11, var14);
    java2.util2.Collection var16 = java2.util2.Collections.unmodifiableCollection(var11);
    java2.util2.List var17 = java2.util2.Collections.singletonList((java.lang.Object)var11);
    java2.util2.List var18 = java2.util2.Collections.unmodifiableList(var17);
    java2.util2.Collections.copy((java2.util2.List)var7, var17);
    java2.util2.TreeSet var20 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var7, (java.lang.Object)var20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var22 = var0.remove((java.lang.Object)var20);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10L+ "'", var13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + 10L+ "'", var15.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var20.toString(),"[]");

  }

  public void test81() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    java2.util2.Set var3 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test82() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test83() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.SortedSet)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(),"[1]");

  }

  public void test84() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.SortedSet var2 = var0.headSet((java.lang.Object)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test85() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    java2.util2.SortedSet var3 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test86() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Collection var3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.min(var3, var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.max(var3, var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var3);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var10 = java2.util2.Collections.unmodifiableList(var9);
    java2.util2.Collections.rotate(var10, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test87() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test88() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var4 = var0.contains((java.lang.Object)0L);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test89() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java2.util2.TreeSet var17 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var17);
    java2.util2.Comparator var19 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var20 = java2.util2.Collections.min((java2.util2.Collection)var17, var19);
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var17.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test90() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    java2.util2.SortedSet var3 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test91() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java2.util2.Collections.shuffle(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test92() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var4 = var0.add((java.lang.Object)0L);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test93() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java2.util2.TreeSet var17 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var17);
    java2.util2.Collections.rotate((java2.util2.List)var4, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var17.toString(),"[]");

  }

  public void test94() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var4 = var0.contains((java.lang.Object)(-1L));
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test95() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.synchronizedSet(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test96() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Comparator var3 = java2.util2.Collections.reverseOrder();
    java.lang.Object var4 = java2.util2.Collections.max((java2.util2.Collection)var1, var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + 10L+ "'", var4.equals(10L));

  }

  public void test97() throws Throwable {

    java2.util2.List var2 = java2.util2.Collections.nCopies(0, (java.lang.Object)"");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test98() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var17 = var4.toArray();
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)var4, 10, 0);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test99() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)(byte)(-1));
    java2.util2.Collections.shuffle((java2.util2.List)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test100() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.remove((java.lang.Object)100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test101() throws Throwable {

    java2.util2.TreeSet var1 = new java2.util2.TreeSet();
    java2.util2.Set var3 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var4 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var3);
    java2.util2.Comparator var5 = java2.util2.Collections.reverseOrder();
    java.lang.Object var6 = java2.util2.Collections.max(var4, var5);
    boolean var7 = var1.containsAll(var4);
    java2.util2.List var8 = java2.util2.Collections.nCopies(0, (java.lang.Object)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var1.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + 10L+ "'", var6.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test102() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.remove((java.lang.Object)100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test103() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Collection var3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.min(var3, var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.max(var3, var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var3);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var9);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test104() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.Collection var6 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.Comparator var7 = java2.util2.Collections.reverseOrder();
    java.lang.Object var8 = java2.util2.Collections.min(var6, var7);
    boolean var9 = var0.removeAll(var6);
    java2.util2.Comparator var10 = java2.util2.Collections.reverseOrder();
    java.lang.Object var11 = java2.util2.Collections.min((java2.util2.Collection)var0, var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + 10L+ "'", var8.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 1+ "'", var11.equals(1));

  }

  public void test105() throws Throwable {

    java2.util2.Map var2 = java2.util2.Collections.singletonMap((java.lang.Object)(byte)1, (java.lang.Object)'4');
    java2.util2.Map var3 = java2.util2.Collections.unmodifiableMap(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test106() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Enumeration var5 = java2.util2.Collections.enumeration((java2.util2.Collection)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test107() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Set var2 = java2.util2.Collections.unmodifiableSet(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test108() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var17 = var4.toArray();
    java2.util2.List var18 = java2.util2.Collections.synchronizedList((java2.util2.List)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var19 = java2.util2.Collections.max((java2.util2.Collection)var4);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test109() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.Enumeration var6 = java2.util2.Collections.enumeration((java2.util2.Collection)var4);
    java2.util2.ArrayList var7 = java2.util2.Collections.list(var6);
    java2.util2.Set var9 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    java2.util2.Collection var11 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var9);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.min(var11, var12);
    java2.util2.Comparator var14 = java2.util2.Collections.reverseOrder();
    java.lang.Object var15 = java2.util2.Collections.max(var11, var14);
    java2.util2.Collection var16 = java2.util2.Collections.unmodifiableCollection(var11);
    java2.util2.List var17 = java2.util2.Collections.singletonList((java.lang.Object)var11);
    java2.util2.List var18 = java2.util2.Collections.unmodifiableList(var17);
    java2.util2.Collections.copy((java2.util2.List)var7, var17);
    java.lang.Object[] var21 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var22 = var7.toArray(var21);
    boolean var25 = java2.util2.Collections.replaceAll((java2.util2.List)var7, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java2.util2.Collections.fill((java2.util2.List)var7, (java.lang.Object)(byte)(-1));
    java2.util2.Set var29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var29);
    boolean var31 = var7.retainAll(var30);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var32 = var0.tailSet((java.lang.Object)var30);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10L+ "'", var13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + 10L+ "'", var15.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);

  }

  public void test110() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet();
    java.lang.Object[] var5 = new java.lang.Object[] { (byte)100};
    java.lang.Object[] var6 = var3.toArray(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var7 = var0.remove((java.lang.Object)var6);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test111() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java2.util2.TreeSet var17 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var17);
    java2.util2.Set var20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var20);
    java2.util2.Collection var22 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var20);
    java2.util2.Comparator var23 = java2.util2.Collections.reverseOrder();
    java.lang.Object var24 = java2.util2.Collections.min(var22, var23);
    java2.util2.Comparator var25 = java2.util2.Collections.reverseOrder();
    java.lang.Object var26 = java2.util2.Collections.max(var22, var25);
    java2.util2.Collection var27 = java2.util2.Collections.unmodifiableCollection(var22);
    java2.util2.List var28 = java2.util2.Collections.singletonList((java.lang.Object)var22);
    java2.util2.Collections.copy((java2.util2.List)var4, var28);
    java2.util2.List var30 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)var4, (-1), 1);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var17.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + 10L+ "'", var24.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + 10L+ "'", var26.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test112() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.Collection var6 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.Comparator var7 = java2.util2.Collections.reverseOrder();
    java.lang.Object var8 = java2.util2.Collections.min(var6, var7);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.max(var6, var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var11 = var0.tailSet((java.lang.Object)var9);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + 10L+ "'", var8.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));

  }

  public void test113() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    java2.util2.List var20 = java2.util2.Collections.synchronizedList((java2.util2.List)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)var4, (-1), 100);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test114() throws Throwable {

    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)'a');
    java2.util2.List var2 = java2.util2.Collections.unmodifiableList(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test115() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Collections.rotate((java2.util2.List)var4, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test116() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java2.util2.Set var18 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var19 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var18);
    java2.util2.Enumeration var20 = java2.util2.Collections.enumeration((java2.util2.Collection)var18);
    java2.util2.ArrayList var21 = java2.util2.Collections.list(var20);
    java2.util2.Set var23 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var23);
    java2.util2.Collection var25 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var23);
    java2.util2.Comparator var26 = java2.util2.Collections.reverseOrder();
    java.lang.Object var27 = java2.util2.Collections.min(var25, var26);
    java2.util2.Comparator var28 = java2.util2.Collections.reverseOrder();
    java.lang.Object var29 = java2.util2.Collections.max(var25, var28);
    java2.util2.Collection var30 = java2.util2.Collections.unmodifiableCollection(var25);
    java2.util2.List var31 = java2.util2.Collections.singletonList((java.lang.Object)var25);
    java2.util2.List var32 = java2.util2.Collections.unmodifiableList(var31);
    java2.util2.Collections.copy((java2.util2.List)var21, var31);
    java2.util2.TreeSet var34 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var21, (java.lang.Object)var34);
    java2.util2.Set var37 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var38 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var37);
    java2.util2.Collection var39 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var37);
    java2.util2.Comparator var40 = java2.util2.Collections.reverseOrder();
    java.lang.Object var41 = java2.util2.Collections.min(var39, var40);
    java2.util2.Comparator var42 = java2.util2.Collections.reverseOrder();
    java.lang.Object var43 = java2.util2.Collections.max(var39, var42);
    java2.util2.Collection var44 = java2.util2.Collections.unmodifiableCollection(var39);
    java2.util2.List var45 = java2.util2.Collections.singletonList((java.lang.Object)var39);
    java2.util2.Collections.copy((java2.util2.List)var21, var45);
    java2.util2.List var47 = java2.util2.Collections.unmodifiableList((java2.util2.List)var21);
    java2.util2.Comparator var48 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var49 = java2.util2.Collections.binarySearch((java2.util2.List)var4, (java.lang.Object)var47, var48);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + 10L+ "'", var27.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + 10L+ "'", var29.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var34.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10L+ "'", var41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + 10L+ "'", var43.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test117() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.TreeSet var1 = new java2.util2.TreeSet();
    java2.util2.Set var3 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var4 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var3);
    boolean var5 = var1.removeAll(var4);
    boolean var6 = var0.containsAll((java2.util2.Collection)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var1.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test118() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)(byte)(-1));
    java2.util2.Collections.sort((java2.util2.List)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test119() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Collection var3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.min(var3, var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.max(var3, var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var3);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var10 = java2.util2.Collections.unmodifiableList(var9);
    java2.util2.TreeSet var12 = new java2.util2.TreeSet();
    java.lang.Object[] var14 = new java.lang.Object[] { (-1L)};
    java.lang.Object[] var15 = var12.toArray(var14);
    boolean var16 = java2.util2.Collections.replaceAll(var9, (java.lang.Object)(short)0, (java.lang.Object)var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var9);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var12.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test120() throws Throwable {

    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)'a');
    java2.util2.Comparator var2 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var1, var2);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test121() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Collection var3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.min(var3, var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.max(var3, var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var3);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var10 = java2.util2.Collections.unmodifiableList(var9);
    java2.util2.List var11 = java2.util2.Collections.unmodifiableList(var9);
    java2.util2.Collections.reverse(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test122() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Collection var4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var2);
    java2.util2.Comparator var5 = java2.util2.Collections.reverseOrder();
    java.lang.Object var6 = java2.util2.Collections.min(var4, var5);
    java2.util2.Comparator var7 = java2.util2.Collections.reverseOrder();
    java.lang.Object var8 = java2.util2.Collections.max(var4, var7);
    boolean var9 = var0.removeAll(var4);
    java2.util2.TreeSet var10 = new java2.util2.TreeSet((java2.util2.Collection)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + 10L+ "'", var6.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + 10L+ "'", var8.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var10.toString(),"[]");

  }

  public void test123() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Enumeration var4 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var6 = var0.tailSet((java.lang.Object)var5);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test124() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.Collection var6 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.Comparator var7 = java2.util2.Collections.reverseOrder();
    java.lang.Object var8 = java2.util2.Collections.min(var6, var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var10 = var0.subSet(var8, (java.lang.Object)10);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + 10L+ "'", var8.equals(10L));

  }

  public void test125() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java2.util2.TreeSet var17 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var17);
    java2.util2.Set var20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var20);
    java2.util2.Collection var22 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var20);
    java2.util2.Comparator var23 = java2.util2.Collections.reverseOrder();
    java.lang.Object var24 = java2.util2.Collections.min(var22, var23);
    java2.util2.Comparator var25 = java2.util2.Collections.reverseOrder();
    java.lang.Object var26 = java2.util2.Collections.max(var22, var25);
    java2.util2.Collection var27 = java2.util2.Collections.unmodifiableCollection(var22);
    java2.util2.List var28 = java2.util2.Collections.singletonList((java.lang.Object)var22);
    java2.util2.Collections.copy((java2.util2.List)var4, var28);
    java2.util2.List var30 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java2.util2.Set var32 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var33 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var32);
    java2.util2.Collection var34 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var32);
    java2.util2.Comparator var35 = java2.util2.Collections.reverseOrder();
    java.lang.Object var36 = java2.util2.Collections.min(var34, var35);
    java2.util2.Comparator var37 = java2.util2.Collections.reverseOrder();
    java.lang.Object var38 = java2.util2.Collections.max(var34, var37);
    java2.util2.Collection var39 = java2.util2.Collections.unmodifiableCollection(var34);
    java2.util2.List var40 = java2.util2.Collections.singletonList((java.lang.Object)var34);
    java2.util2.Collections.shuffle(var40);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var42 = java2.util2.Collections.binarySearch(var30, (java.lang.Object)var40);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var17.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + 10L+ "'", var24.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + 10L+ "'", var26.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + 10L+ "'", var36.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + 10L+ "'", var38.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test126() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var5 = java2.util2.Collections.singleton((java.lang.Object)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var6 = var0.headSet((java.lang.Object)var5);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test127() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var17 = var4.toArray();
    java2.util2.Collections.reverse((java2.util2.List)var4);
    java2.util2.Set var20 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var21 = java2.util2.Collections.singleton((java.lang.Object)var20);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var21);
    java2.util2.TreeSet var23 = new java2.util2.TreeSet();
    java2.util2.Set var25 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var26 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var25);
    boolean var27 = var23.removeAll(var26);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var28 = java2.util2.Collections.binarySearch((java2.util2.List)var4, (java.lang.Object)var27);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var23.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test128() throws Throwable {

    java2.util2.Map var2 = java2.util2.Collections.singletonMap((java.lang.Object)100.0d, (java.lang.Object)(-1L));
    java2.util2.Map var3 = java2.util2.Collections.synchronizedMap(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test129() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java2.util2.Set var24 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var24);
    java2.util2.Enumeration var26 = java2.util2.Collections.enumeration((java2.util2.Collection)var24);
    java2.util2.ArrayList var27 = java2.util2.Collections.list(var26);
    java2.util2.Set var29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var29);
    java2.util2.Collection var31 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var29);
    java2.util2.Comparator var32 = java2.util2.Collections.reverseOrder();
    java.lang.Object var33 = java2.util2.Collections.min(var31, var32);
    java2.util2.Comparator var34 = java2.util2.Collections.reverseOrder();
    java.lang.Object var35 = java2.util2.Collections.max(var31, var34);
    java2.util2.Collection var36 = java2.util2.Collections.unmodifiableCollection(var31);
    java2.util2.List var37 = java2.util2.Collections.singletonList((java.lang.Object)var31);
    java2.util2.List var38 = java2.util2.Collections.unmodifiableList(var37);
    java2.util2.Collections.copy((java2.util2.List)var27, var37);
    boolean var40 = var4.retainAll((java2.util2.Collection)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + 10L+ "'", var33.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + 10L+ "'", var35.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);

  }

  public void test130() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Enumeration var4 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.Collection var9 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var7);
    java2.util2.Comparator var10 = java2.util2.Collections.reverseOrder();
    java.lang.Object var11 = java2.util2.Collections.min(var9, var10);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.max(var9, var12);
    java2.util2.Collection var14 = java2.util2.Collections.unmodifiableCollection(var9);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var5, var15);
    java.lang.Object[] var18 = var5.toArray();
    java2.util2.List var19 = java2.util2.Collections.singletonList((java.lang.Object)var5);
    java2.util2.Set var21 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.Collection var23 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var21);
    java2.util2.Comparator var24 = java2.util2.Collections.reverseOrder();
    java.lang.Object var25 = java2.util2.Collections.min(var23, var24);
    java2.util2.Comparator var26 = java2.util2.Collections.reverseOrder();
    java.lang.Object var27 = java2.util2.Collections.max(var23, var26);
    java2.util2.Collection var28 = java2.util2.Collections.unmodifiableCollection(var23);
    boolean var29 = var5.retainAll(var28);
    boolean var30 = var0.removeAll((java2.util2.Collection)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 10L+ "'", var11.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10L+ "'", var13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + 10L+ "'", var25.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + 10L+ "'", var27.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test131() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Set var27 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var28 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var27);
    java2.util2.Enumeration var29 = java2.util2.Collections.enumeration((java2.util2.Collection)var27);
    java2.util2.ArrayList var30 = java2.util2.Collections.list(var29);
    java2.util2.Set var32 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var33 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var32);
    java2.util2.Collection var34 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var32);
    java2.util2.Comparator var35 = java2.util2.Collections.reverseOrder();
    java.lang.Object var36 = java2.util2.Collections.min(var34, var35);
    java2.util2.Comparator var37 = java2.util2.Collections.reverseOrder();
    java.lang.Object var38 = java2.util2.Collections.max(var34, var37);
    java2.util2.Collection var39 = java2.util2.Collections.unmodifiableCollection(var34);
    java2.util2.List var40 = java2.util2.Collections.singletonList((java.lang.Object)var34);
    java2.util2.List var41 = java2.util2.Collections.unmodifiableList(var40);
    java2.util2.Collections.copy((java2.util2.List)var30, var40);
    java2.util2.TreeSet var43 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var30, (java.lang.Object)var43);
    java2.util2.Set var46 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var47 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var46);
    java2.util2.Collection var48 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var46);
    java2.util2.Comparator var49 = java2.util2.Collections.reverseOrder();
    java.lang.Object var50 = java2.util2.Collections.min(var48, var49);
    java2.util2.Comparator var51 = java2.util2.Collections.reverseOrder();
    java.lang.Object var52 = java2.util2.Collections.max(var48, var51);
    java2.util2.Collection var53 = java2.util2.Collections.unmodifiableCollection(var48);
    java2.util2.List var54 = java2.util2.Collections.singletonList((java.lang.Object)var48);
    java2.util2.Collections.copy((java2.util2.List)var30, var54);
    java2.util2.List var56 = java2.util2.Collections.unmodifiableList((java2.util2.List)var30);
    java.lang.Object[] var58 = new java.lang.Object[] { 10.0f};
    java.lang.Object[] var59 = var30.toArray(var58);
    boolean var60 = var4.retainAll((java2.util2.Collection)var30);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var61 = java2.util2.Collections.max((java2.util2.Collection)var30);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + 10L+ "'", var36.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + 10L+ "'", var38.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var43.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + 10L+ "'", var50.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + 10L+ "'", var52.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);

  }

  public void test132() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java2.util2.TreeSet var17 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var17);
    java2.util2.Set var20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var20);
    java2.util2.Collection var22 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var20);
    java2.util2.Comparator var23 = java2.util2.Collections.reverseOrder();
    java.lang.Object var24 = java2.util2.Collections.min(var22, var23);
    java2.util2.Comparator var25 = java2.util2.Collections.reverseOrder();
    java.lang.Object var26 = java2.util2.Collections.max(var22, var25);
    java2.util2.Collection var27 = java2.util2.Collections.unmodifiableCollection(var22);
    java2.util2.List var28 = java2.util2.Collections.singletonList((java.lang.Object)var22);
    boolean var29 = var17.containsAll(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var17.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + 10L+ "'", var24.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + 10L+ "'", var26.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test133() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var17 = var4.toArray();
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)var4, (-1), 10);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test134() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)(byte)(-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var26 = java2.util2.Collections.binarySearch((java2.util2.List)var4, (java.lang.Object)false);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test135() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)'a');
    java2.util2.Set var2 = java2.util2.Collections.synchronizedSet(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test136() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Collection var4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var2);
    java2.util2.Comparator var5 = java2.util2.Collections.reverseOrder();
    java.lang.Object var6 = java2.util2.Collections.min(var4, var5);
    java2.util2.Comparator var7 = java2.util2.Collections.reverseOrder();
    java.lang.Object var8 = java2.util2.Collections.max(var4, var7);
    java2.util2.Collection var9 = java2.util2.Collections.unmodifiableCollection(var4);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var4);
    java2.util2.Collections.shuffle(var10);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.min((java2.util2.Collection)var10, var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var14 = var0.headSet(var13);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + 10L+ "'", var6.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + 10L+ "'", var8.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test137() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var17 = var4.toArray();
    java2.util2.Collections.reverse((java2.util2.List)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)var4, 10, (-1));
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test138() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java.lang.Object var1 = new java.lang.Object();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var2 = var0.headSet(var1);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");

  }

  public void test139() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Collection var3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.min(var3, var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.max(var3, var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var3);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var11);
    java2.util2.Comparator var14 = java2.util2.Collections.reverseOrder();
    java.lang.Object var15 = java2.util2.Collections.min(var13, var14);
    java2.util2.Comparator var16 = java2.util2.Collections.reverseOrder();
    java.lang.Object var17 = java2.util2.Collections.max(var13, var16);
    java2.util2.Collection var18 = java2.util2.Collections.unmodifiableCollection(var13);
    java2.util2.List var19 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.Collections.shuffle(var19);
    java2.util2.Comparator var21 = java2.util2.Collections.reverseOrder();
    java.lang.Object var22 = java2.util2.Collections.min((java2.util2.Collection)var19, var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(var9, var19);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + 10L+ "'", var15.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + 10L+ "'", var17.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test140() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.Set var3 = java2.util2.Collections.unmodifiableSet(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test141() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java2.util2.TreeSet var17 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var17);
    java2.util2.Set var20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var20);
    java2.util2.Collection var22 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var20);
    java2.util2.Comparator var23 = java2.util2.Collections.reverseOrder();
    java.lang.Object var24 = java2.util2.Collections.min(var22, var23);
    java2.util2.Comparator var25 = java2.util2.Collections.reverseOrder();
    java.lang.Object var26 = java2.util2.Collections.max(var22, var25);
    java2.util2.Collection var27 = java2.util2.Collections.unmodifiableCollection(var22);
    java2.util2.List var28 = java2.util2.Collections.singletonList((java.lang.Object)var22);
    java2.util2.Collections.copy((java2.util2.List)var4, var28);
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.Collection var33 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var31);
    java2.util2.Comparator var34 = java2.util2.Collections.reverseOrder();
    java.lang.Object var35 = java2.util2.Collections.min(var33, var34);
    java2.util2.Comparator var36 = java2.util2.Collections.reverseOrder();
    java.lang.Object var37 = java2.util2.Collections.max(var33, var36);
    java2.util2.Collection var38 = java2.util2.Collections.unmodifiableCollection(var33);
    java2.util2.List var39 = java2.util2.Collections.singletonList((java.lang.Object)var33);
    java2.util2.List var40 = java2.util2.Collections.unmodifiableList(var39);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(var28, var39);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var17.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + 10L+ "'", var24.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + 10L+ "'", var26.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + 10L+ "'", var35.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + 10L+ "'", var37.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test142() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java2.util2.TreeSet var17 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var17);
    java2.util2.Set var20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var20);
    java2.util2.Collection var22 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var20);
    java2.util2.Comparator var23 = java2.util2.Collections.reverseOrder();
    java.lang.Object var24 = java2.util2.Collections.min(var22, var23);
    java2.util2.Comparator var25 = java2.util2.Collections.reverseOrder();
    java.lang.Object var26 = java2.util2.Collections.max(var22, var25);
    java2.util2.Collection var27 = java2.util2.Collections.unmodifiableCollection(var22);
    java2.util2.List var28 = java2.util2.Collections.singletonList((java.lang.Object)var22);
    java2.util2.Collections.copy((java2.util2.List)var4, var28);
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.Enumeration var33 = java2.util2.Collections.enumeration((java2.util2.Collection)var31);
    java2.util2.ArrayList var34 = java2.util2.Collections.list(var33);
    java2.util2.Set var36 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var37 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var36);
    java2.util2.Collection var38 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var36);
    java2.util2.Comparator var39 = java2.util2.Collections.reverseOrder();
    java.lang.Object var40 = java2.util2.Collections.min(var38, var39);
    java2.util2.Comparator var41 = java2.util2.Collections.reverseOrder();
    java.lang.Object var42 = java2.util2.Collections.max(var38, var41);
    java2.util2.Collection var43 = java2.util2.Collections.unmodifiableCollection(var38);
    java2.util2.List var44 = java2.util2.Collections.singletonList((java.lang.Object)var38);
    java2.util2.List var45 = java2.util2.Collections.unmodifiableList(var44);
    java2.util2.Collections.copy((java2.util2.List)var34, var44);
    java.lang.Object[] var47 = var34.toArray();
    java2.util2.Collections.reverse((java2.util2.List)var34);
    java2.util2.Set var50 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var51 = java2.util2.Collections.singleton((java.lang.Object)var50);
    java2.util2.Collections.fill((java2.util2.List)var34, (java.lang.Object)var51);
    java2.util2.Collections.copy((java2.util2.List)var4, (java2.util2.List)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var17.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + 10L+ "'", var24.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + 10L+ "'", var26.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + 10L+ "'", var40.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + 10L+ "'", var42.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test143() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.Enumeration var6 = java2.util2.Collections.enumeration((java2.util2.Collection)var4);
    java2.util2.ArrayList var7 = java2.util2.Collections.list(var6);
    java2.util2.Set var9 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    java2.util2.Collection var11 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var9);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.min(var11, var12);
    java2.util2.Comparator var14 = java2.util2.Collections.reverseOrder();
    java.lang.Object var15 = java2.util2.Collections.max(var11, var14);
    java2.util2.Collection var16 = java2.util2.Collections.unmodifiableCollection(var11);
    java2.util2.List var17 = java2.util2.Collections.singletonList((java.lang.Object)var11);
    java2.util2.List var18 = java2.util2.Collections.unmodifiableList(var17);
    java2.util2.Collections.copy((java2.util2.List)var7, var17);
    java2.util2.TreeSet var20 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var7, (java.lang.Object)var20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var22 = var0.add((java.lang.Object)var7);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10L+ "'", var13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + 10L+ "'", var15.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var20.toString(),"[]");

  }

  public void test144() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Collection var3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.min(var3, var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.max(var3, var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var3);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.Collections.shuffle(var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.min((java2.util2.Collection)var9, var11);
    java2.util2.Comparator var14 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var15 = java2.util2.Collections.binarySearch(var9, (java.lang.Object)(short)0, var14);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test145() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Set var27 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var28 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var27);
    java2.util2.Enumeration var29 = java2.util2.Collections.enumeration((java2.util2.Collection)var27);
    java2.util2.ArrayList var30 = java2.util2.Collections.list(var29);
    java2.util2.Set var32 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var33 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var32);
    java2.util2.Collection var34 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var32);
    java2.util2.Comparator var35 = java2.util2.Collections.reverseOrder();
    java.lang.Object var36 = java2.util2.Collections.min(var34, var35);
    java2.util2.Comparator var37 = java2.util2.Collections.reverseOrder();
    java.lang.Object var38 = java2.util2.Collections.max(var34, var37);
    java2.util2.Collection var39 = java2.util2.Collections.unmodifiableCollection(var34);
    java2.util2.List var40 = java2.util2.Collections.singletonList((java.lang.Object)var34);
    java2.util2.List var41 = java2.util2.Collections.unmodifiableList(var40);
    java2.util2.Collections.copy((java2.util2.List)var30, var40);
    java.lang.Object[] var44 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var45 = var30.toArray(var44);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var46 = java2.util2.Collections.binarySearch((java2.util2.List)var4, (java.lang.Object)var45);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + 10L+ "'", var36.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + 10L+ "'", var38.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test146() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)'a');
    int var7 = java2.util2.Collections.indexOfSubList((java2.util2.List)var4, var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));

  }

  public void test147() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)'a');
    java2.util2.Set var2 = java2.util2.Collections.unmodifiableSet(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test148() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.TreeSet var1 = new java2.util2.TreeSet();
    java.lang.Object[] var2 = var1.toArray();
    boolean var3 = var0.remove((java.lang.Object)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var1.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test149() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var29 = var27.contains((java.lang.Object)'#');
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");

  }

  public void test150() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.SortedSet var2 = var0.tailSet((java.lang.Object)(short)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test151() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var17 = var4.toArray();
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)var4);
    java.lang.Object[] var20 = new java.lang.Object[] { ""};
    java.lang.Object[] var21 = var4.toArray(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test152() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    java.lang.Object var3 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test153() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Comparator var32 = java2.util2.Collections.reverseOrder();
    java.lang.Object var33 = java2.util2.Collections.max(var31, var32);
    java2.util2.Comparator var34 = java2.util2.Collections.reverseOrder();
    java.lang.Object var35 = java2.util2.Collections.max(var31, var34);
    java2.util2.Map var36 = java2.util2.Collections.singletonMap((java.lang.Object)0.0d, (java.lang.Object)var31);
    java2.util2.Collection var37 = java2.util2.Collections.unmodifiableCollection(var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var39 = var27.subSet((java.lang.Object)var37, (java.lang.Object)10.0d);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + 10L+ "'", var33.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + 10L+ "'", var35.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test154() throws Throwable {

    java2.util2.TreeSet var1 = new java2.util2.TreeSet();
    java2.util2.Set var3 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var4 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var3);
    boolean var5 = var1.removeAll(var4);
    java.lang.Object var6 = java2.util2.Collections.min(var4);
    java2.util2.List var7 = java2.util2.Collections.nCopies(0, (java.lang.Object)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var1.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + 10L+ "'", var6.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test155() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java2.util2.TreeSet var17 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var17);
    java2.util2.Set var20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var20);
    java2.util2.Collection var22 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var20);
    java2.util2.Comparator var23 = java2.util2.Collections.reverseOrder();
    java.lang.Object var24 = java2.util2.Collections.min(var22, var23);
    java2.util2.Comparator var25 = java2.util2.Collections.reverseOrder();
    java.lang.Object var26 = java2.util2.Collections.max(var22, var25);
    java2.util2.Collection var27 = java2.util2.Collections.unmodifiableCollection(var22);
    java2.util2.List var28 = java2.util2.Collections.singletonList((java.lang.Object)var22);
    java2.util2.Collections.copy((java2.util2.List)var4, var28);
    java2.util2.List var30 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.Object[] var32 = new java.lang.Object[] { 10.0f};
    java.lang.Object[] var33 = var4.toArray(var32);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var35 = java2.util2.Collections.binarySearch((java2.util2.List)var4, (java.lang.Object)10L);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var17.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + 10L+ "'", var24.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + 10L+ "'", var26.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test156() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java2.util2.Set var26 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var27 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var26);
    java2.util2.Enumeration var28 = java2.util2.Collections.enumeration((java2.util2.Collection)var26);
    java2.util2.ArrayList var29 = java2.util2.Collections.list(var28);
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.Collection var33 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var31);
    java2.util2.Comparator var34 = java2.util2.Collections.reverseOrder();
    java.lang.Object var35 = java2.util2.Collections.min(var33, var34);
    java2.util2.Comparator var36 = java2.util2.Collections.reverseOrder();
    java.lang.Object var37 = java2.util2.Collections.max(var33, var36);
    java2.util2.Collection var38 = java2.util2.Collections.unmodifiableCollection(var33);
    java2.util2.List var39 = java2.util2.Collections.singletonList((java.lang.Object)var33);
    java2.util2.List var40 = java2.util2.Collections.unmodifiableList(var39);
    java2.util2.Collections.copy((java2.util2.List)var29, var39);
    java.lang.Object[] var43 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var44 = var29.toArray(var43);
    boolean var47 = java2.util2.Collections.replaceAll((java2.util2.List)var29, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var48 = var29.toString();
    java2.util2.List var49 = java2.util2.Collections.unmodifiableList((java2.util2.List)var29);
    java.lang.String var50 = var29.toString();
    java2.util2.Collection var51 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var29);
    int var52 = java2.util2.Collections.indexOfSubList((java2.util2.List)var4, (java2.util2.List)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + 10L+ "'", var35.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + 10L+ "'", var37.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[[10]]"+ "'", var48.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "[[10]]"+ "'", var50.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1));

  }

  public void test157() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java2.util2.Iterator var28 = var27.iterator();
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.Enumeration var33 = java2.util2.Collections.enumeration((java2.util2.Collection)var31);
    java2.util2.ArrayList var34 = java2.util2.Collections.list(var33);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var35 = var27.subSet((java.lang.Object)(-1.0f), (java.lang.Object)var33);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test158() throws Throwable {

    java2.util2.List var2 = java2.util2.Collections.nCopies(0, (java.lang.Object)10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test159() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var17 = var4.toArray();
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)var4);
    java2.util2.Collections.shuffle((java2.util2.List)var4);
    java2.util2.Collections.sort((java2.util2.List)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test160() throws Throwable {

    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Enumeration var4 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.Collection var9 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var7);
    java2.util2.Comparator var10 = java2.util2.Collections.reverseOrder();
    java.lang.Object var11 = java2.util2.Collections.min(var9, var10);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.max(var9, var12);
    java2.util2.Collection var14 = java2.util2.Collections.unmodifiableCollection(var9);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var5, var15);
    java.lang.Object[] var19 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var20 = var5.toArray(var19);
    java2.util2.List var21 = java2.util2.Collections.synchronizedList((java2.util2.List)var5);
    java2.util2.List var22 = java2.util2.Collections.synchronizedList((java2.util2.List)var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.List var23 = java2.util2.Collections.nCopies((-1), (java.lang.Object)var5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 10L+ "'", var11.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10L+ "'", var13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test161() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Enumeration var32 = java2.util2.Collections.enumeration((java2.util2.Collection)var30);
    java2.util2.ArrayList var33 = java2.util2.Collections.list(var32);
    java2.util2.Set var35 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var36 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var35);
    java2.util2.Collection var37 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var35);
    java2.util2.Comparator var38 = java2.util2.Collections.reverseOrder();
    java.lang.Object var39 = java2.util2.Collections.min(var37, var38);
    java2.util2.Comparator var40 = java2.util2.Collections.reverseOrder();
    java.lang.Object var41 = java2.util2.Collections.max(var37, var40);
    java2.util2.Collection var42 = java2.util2.Collections.unmodifiableCollection(var37);
    java2.util2.List var43 = java2.util2.Collections.singletonList((java.lang.Object)var37);
    java2.util2.List var44 = java2.util2.Collections.unmodifiableList(var43);
    java2.util2.Collections.copy((java2.util2.List)var33, var43);
    java.lang.Object[] var46 = var33.toArray();
    java2.util2.List var47 = java2.util2.Collections.synchronizedList((java2.util2.List)var33);
    boolean var48 = var27.equals((java.lang.Object)var33);
    java2.util2.Iterator var49 = var27.iterator();
    java2.util2.Map var51 = java2.util2.Collections.singletonMap((java.lang.Object)var27, (java.lang.Object)1.0d);
    var27.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + 10L+ "'", var39.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10L+ "'", var41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test162() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java2.util2.TreeSet var17 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var17);
    java2.util2.Set var20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var20);
    java2.util2.Collection var22 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var20);
    java2.util2.Comparator var23 = java2.util2.Collections.reverseOrder();
    java.lang.Object var24 = java2.util2.Collections.min(var22, var23);
    java2.util2.Comparator var25 = java2.util2.Collections.reverseOrder();
    java.lang.Object var26 = java2.util2.Collections.max(var22, var25);
    java2.util2.Collection var27 = java2.util2.Collections.unmodifiableCollection(var22);
    java2.util2.List var28 = java2.util2.Collections.singletonList((java.lang.Object)var22);
    java2.util2.Collections.copy((java2.util2.List)var4, var28);
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.Enumeration var33 = java2.util2.Collections.enumeration((java2.util2.Collection)var31);
    java2.util2.ArrayList var34 = java2.util2.Collections.list(var33);
    java2.util2.Set var36 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var37 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var36);
    java2.util2.Collection var38 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var36);
    java2.util2.Comparator var39 = java2.util2.Collections.reverseOrder();
    java.lang.Object var40 = java2.util2.Collections.min(var38, var39);
    java2.util2.Comparator var41 = java2.util2.Collections.reverseOrder();
    java.lang.Object var42 = java2.util2.Collections.max(var38, var41);
    java2.util2.Collection var43 = java2.util2.Collections.unmodifiableCollection(var38);
    java2.util2.List var44 = java2.util2.Collections.singletonList((java.lang.Object)var38);
    java2.util2.List var45 = java2.util2.Collections.unmodifiableList(var44);
    java2.util2.Collections.copy((java2.util2.List)var34, var44);
    java.lang.Object[] var48 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var49 = var34.toArray(var48);
    boolean var52 = java2.util2.Collections.replaceAll((java2.util2.List)var34, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var53 = var34.toString();
    java2.util2.List var54 = java2.util2.Collections.unmodifiableList((java2.util2.List)var34);
    java.lang.String var55 = var34.toString();
    java2.util2.Collection var56 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var34);
    int var57 = java2.util2.Collections.lastIndexOfSubList(var28, (java2.util2.List)var34);
    java2.util2.Comparator var58 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var28, var58);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var17.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + 10L+ "'", var24.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + 10L+ "'", var26.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + 10L+ "'", var40.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + 10L+ "'", var42.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "[[10]]"+ "'", var53.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "[[10]]"+ "'", var55.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test163() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Iterator var29 = var27.iterator();
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.Enumeration var33 = java2.util2.Collections.enumeration((java2.util2.Collection)var31);
    java2.util2.ArrayList var34 = java2.util2.Collections.list(var33);
    java2.util2.Set var36 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var37 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var36);
    java2.util2.Collection var38 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var36);
    java2.util2.Comparator var39 = java2.util2.Collections.reverseOrder();
    java.lang.Object var40 = java2.util2.Collections.min(var38, var39);
    java2.util2.Comparator var41 = java2.util2.Collections.reverseOrder();
    java.lang.Object var42 = java2.util2.Collections.max(var38, var41);
    java2.util2.Collection var43 = java2.util2.Collections.unmodifiableCollection(var38);
    java2.util2.List var44 = java2.util2.Collections.singletonList((java.lang.Object)var38);
    java2.util2.List var45 = java2.util2.Collections.unmodifiableList(var44);
    java2.util2.Collections.copy((java2.util2.List)var34, var44);
    java.lang.Object[] var48 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var49 = var34.toArray(var48);
    java2.util2.List var50 = java2.util2.Collections.synchronizedList((java2.util2.List)var34);
    java2.util2.List var51 = java2.util2.Collections.synchronizedList((java2.util2.List)var34);
    java.lang.Object[] var52 = var34.toArray();
    boolean var53 = var27.retainAll((java2.util2.Collection)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + 10L+ "'", var40.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + 10L+ "'", var42.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);

  }

  public void test164() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var17 = var4.toArray();
    java2.util2.List var18 = java2.util2.Collections.synchronizedList((java2.util2.List)var4);
    java2.util2.Enumeration var19 = java2.util2.Collections.enumeration((java2.util2.Collection)var4);
    java2.util2.ArrayList var20 = java2.util2.Collections.list(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test165() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var30 = var27.contains((java.lang.Object)true);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test166() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Collection var3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.min(var3, var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.max(var3, var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var3);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)'a');
    int var12 = java2.util2.Collections.lastIndexOfSubList(var9, var11);
    java2.util2.List var13 = java2.util2.Collections.synchronizedList(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test167() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    int var29 = var27.size();
    var27.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);

  }

  public void test168() throws Throwable {

    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Enumeration var4 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.Collection var9 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var7);
    java2.util2.Comparator var10 = java2.util2.Collections.reverseOrder();
    java.lang.Object var11 = java2.util2.Collections.min(var9, var10);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.max(var9, var12);
    java2.util2.Collection var14 = java2.util2.Collections.unmodifiableCollection(var9);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var5, var15);
    java2.util2.TreeSet var18 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var5, (java.lang.Object)var18);
    java2.util2.Set var21 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.Collection var23 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var21);
    java2.util2.Comparator var24 = java2.util2.Collections.reverseOrder();
    java.lang.Object var25 = java2.util2.Collections.min(var23, var24);
    java2.util2.Comparator var26 = java2.util2.Collections.reverseOrder();
    java.lang.Object var27 = java2.util2.Collections.max(var23, var26);
    java2.util2.Collection var28 = java2.util2.Collections.unmodifiableCollection(var23);
    java2.util2.List var29 = java2.util2.Collections.singletonList((java.lang.Object)var23);
    java2.util2.Collections.copy((java2.util2.List)var5, var29);
    java2.util2.Set var32 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var33 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var32);
    java2.util2.Enumeration var34 = java2.util2.Collections.enumeration((java2.util2.Collection)var32);
    java2.util2.ArrayList var35 = java2.util2.Collections.list(var34);
    java2.util2.Set var37 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var38 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var37);
    java2.util2.Collection var39 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var37);
    java2.util2.Comparator var40 = java2.util2.Collections.reverseOrder();
    java.lang.Object var41 = java2.util2.Collections.min(var39, var40);
    java2.util2.Comparator var42 = java2.util2.Collections.reverseOrder();
    java.lang.Object var43 = java2.util2.Collections.max(var39, var42);
    java2.util2.Collection var44 = java2.util2.Collections.unmodifiableCollection(var39);
    java2.util2.List var45 = java2.util2.Collections.singletonList((java.lang.Object)var39);
    java2.util2.List var46 = java2.util2.Collections.unmodifiableList(var45);
    java2.util2.Collections.copy((java2.util2.List)var35, var45);
    java.lang.Object[] var49 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var50 = var35.toArray(var49);
    boolean var53 = java2.util2.Collections.replaceAll((java2.util2.List)var35, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var54 = var35.toString();
    java2.util2.List var55 = java2.util2.Collections.unmodifiableList((java2.util2.List)var35);
    java.lang.String var56 = var35.toString();
    java2.util2.Collection var57 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var35);
    int var58 = java2.util2.Collections.lastIndexOfSubList(var29, (java2.util2.List)var35);
    java2.util2.List var59 = java2.util2.Collections.nCopies(10, (java.lang.Object)var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.TreeSet var60 = new java2.util2.TreeSet((java2.util2.Collection)var59);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 10L+ "'", var11.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10L+ "'", var13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var18.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + 10L+ "'", var25.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + 10L+ "'", var27.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10L+ "'", var41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + 10L+ "'", var43.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "[[10]]"+ "'", var54.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "[[10]]"+ "'", var56.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test169() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Enumeration var32 = java2.util2.Collections.enumeration((java2.util2.Collection)var30);
    java2.util2.ArrayList var33 = java2.util2.Collections.list(var32);
    java2.util2.Set var35 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var36 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var35);
    java2.util2.Collection var37 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var35);
    java2.util2.Comparator var38 = java2.util2.Collections.reverseOrder();
    java.lang.Object var39 = java2.util2.Collections.min(var37, var38);
    java2.util2.Comparator var40 = java2.util2.Collections.reverseOrder();
    java.lang.Object var41 = java2.util2.Collections.max(var37, var40);
    java2.util2.Collection var42 = java2.util2.Collections.unmodifiableCollection(var37);
    java2.util2.List var43 = java2.util2.Collections.singletonList((java.lang.Object)var37);
    java2.util2.List var44 = java2.util2.Collections.unmodifiableList(var43);
    java2.util2.Collections.copy((java2.util2.List)var33, var43);
    java.lang.Object[] var47 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var48 = var33.toArray(var47);
    boolean var51 = java2.util2.Collections.replaceAll((java2.util2.List)var33, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var52 = var33.toString();
    java2.util2.List var53 = java2.util2.Collections.unmodifiableList((java2.util2.List)var33);
    java.lang.String var54 = var33.toString();
    java2.util2.Collection var55 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var33);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var56 = var27.addAll((java2.util2.Collection)var33);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + 10L+ "'", var39.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10L+ "'", var41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "[[10]]"+ "'", var52.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "[[10]]"+ "'", var54.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test170() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    boolean var4 = var0.removeAll(var3);
    java.lang.Object var5 = java2.util2.Collections.min(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test171() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Collection var3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.min(var3, var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.max(var3, var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var3);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)'a');
    int var12 = java2.util2.Collections.lastIndexOfSubList(var9, var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(var11, (-1), 100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));

  }

  public void test172() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java2.util2.Comparator var25 = java2.util2.Collections.reverseOrder();
    java.lang.Object var26 = java2.util2.Collections.max((java2.util2.Collection)var4, var25);
    java2.util2.Set var28 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var29 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var28);
    java2.util2.Enumeration var30 = java2.util2.Collections.enumeration((java2.util2.Collection)var28);
    java2.util2.ArrayList var31 = java2.util2.Collections.list(var30);
    java2.util2.Set var33 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var34 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var33);
    java2.util2.Collection var35 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var33);
    java2.util2.Comparator var36 = java2.util2.Collections.reverseOrder();
    java.lang.Object var37 = java2.util2.Collections.min(var35, var36);
    java2.util2.Comparator var38 = java2.util2.Collections.reverseOrder();
    java.lang.Object var39 = java2.util2.Collections.max(var35, var38);
    java2.util2.Collection var40 = java2.util2.Collections.unmodifiableCollection(var35);
    java2.util2.List var41 = java2.util2.Collections.singletonList((java.lang.Object)var35);
    java2.util2.List var42 = java2.util2.Collections.unmodifiableList(var41);
    java2.util2.Collections.copy((java2.util2.List)var31, var41);
    java.lang.Object[] var45 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var46 = var31.toArray(var45);
    boolean var49 = java2.util2.Collections.replaceAll((java2.util2.List)var31, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var50 = var31.toString();
    java2.util2.List var51 = java2.util2.Collections.unmodifiableList((java2.util2.List)var31);
    java.lang.String var52 = var31.toString();
    java2.util2.Collection var53 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var31);
    java2.util2.TreeSet var54 = new java2.util2.TreeSet(var53);
    java2.util2.Iterator var55 = var54.iterator();
    java2.util2.Comparator var56 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var57 = java2.util2.Collections.binarySearch((java2.util2.List)var4, (java.lang.Object)var55, var56);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + 10L+ "'", var37.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + 10L+ "'", var39.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "[[10]]"+ "'", var50.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "[[10]]"+ "'", var52.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var54.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test173() throws Throwable {

    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)100L);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)'a');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(var1, var3);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test174() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Iterator var29 = var27.iterator();
    java.lang.Object[] var30 = var27.toArray();
    boolean var31 = var27.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var32 = java2.util2.Collections.min((java2.util2.Collection)var27);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test175() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var17 = var4.toArray();
    java2.util2.List var18 = java2.util2.Collections.synchronizedList((java2.util2.List)var4);
    java2.util2.Collections.rotate((java2.util2.List)var4, 1);
    java2.util2.Set var22 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var23 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var22);
    java2.util2.Enumeration var24 = java2.util2.Collections.enumeration((java2.util2.Collection)var22);
    java2.util2.ArrayList var25 = java2.util2.Collections.list(var24);
    java2.util2.Set var27 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var28 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var27);
    java2.util2.Collection var29 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var27);
    java2.util2.Comparator var30 = java2.util2.Collections.reverseOrder();
    java.lang.Object var31 = java2.util2.Collections.min(var29, var30);
    java2.util2.Comparator var32 = java2.util2.Collections.reverseOrder();
    java.lang.Object var33 = java2.util2.Collections.max(var29, var32);
    java2.util2.Collection var34 = java2.util2.Collections.unmodifiableCollection(var29);
    java2.util2.List var35 = java2.util2.Collections.singletonList((java.lang.Object)var29);
    java2.util2.List var36 = java2.util2.Collections.unmodifiableList(var35);
    java2.util2.Collections.copy((java2.util2.List)var25, var35);
    java.lang.Object[] var39 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var40 = var25.toArray(var39);
    boolean var43 = java2.util2.Collections.replaceAll((java2.util2.List)var25, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var44 = var25.toString();
    java2.util2.List var45 = java2.util2.Collections.unmodifiableList((java2.util2.List)var25);
    java.lang.String var46 = var25.toString();
    java2.util2.Collection var47 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var25);
    java2.util2.TreeSet var48 = new java2.util2.TreeSet(var47);
    boolean var49 = var4.retainAll(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + 10L+ "'", var31.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + 10L+ "'", var33.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "[[10]]"+ "'", var44.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "[[10]]"+ "'", var46.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var48.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);

  }

  public void test176() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java2.util2.Set var26 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var27 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var26);
    java2.util2.Collection var28 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var26);
    java2.util2.Comparator var29 = java2.util2.Collections.reverseOrder();
    java.lang.Object var30 = java2.util2.Collections.min(var28, var29);
    java2.util2.Comparator var31 = java2.util2.Collections.reverseOrder();
    java.lang.Object var32 = java2.util2.Collections.max(var28, var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var33 = java2.util2.Collections.binarySearch((java2.util2.List)var4, var32);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + 10L+ "'", var30.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + 10L+ "'", var32.equals(10L));

  }

  public void test177() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java2.util2.Iterator var28 = var27.iterator();
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)var30);
    java2.util2.Enumeration var32 = java2.util2.Collections.enumeration((java2.util2.Collection)var30);
    java2.util2.ArrayList var33 = java2.util2.Collections.list(var32);
    java2.util2.Collections.fill((java2.util2.List)var33, (java.lang.Object)(-1.0d));
    java2.util2.SortedSet var36 = var27.headSet((java.lang.Object)(-1.0d));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.TreeSet var37 = new java2.util2.TreeSet(var36);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test178() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)(byte)(-1));
    java2.util2.Set var26 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var27 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var26);
    boolean var28 = var4.retainAll(var27);
    java2.util2.Comparator var30 = java2.util2.Collections.reverseOrder();
    int var31 = java2.util2.Collections.binarySearch((java2.util2.List)var4, (java.lang.Object)(byte)10, var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));

  }

  public void test179() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.Collection var6 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.Comparator var7 = java2.util2.Collections.reverseOrder();
    java.lang.Object var8 = java2.util2.Collections.min(var6, var7);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.max(var6, var9);
    java2.util2.Collection var11 = java2.util2.Collections.unmodifiableCollection(var6);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    java2.util2.List var13 = java2.util2.Collections.unmodifiableList(var12);
    java2.util2.List var14 = java2.util2.Collections.unmodifiableList(var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var16 = var0.subSet((java.lang.Object)var14, (java.lang.Object)0.0f);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + 10L+ "'", var8.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test180() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test181() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    java2.util2.List var20 = java2.util2.Collections.synchronizedList((java2.util2.List)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var21 = java2.util2.Collections.max((java2.util2.Collection)var20);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test182() throws Throwable {

    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Collection var4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var2);
    java2.util2.Comparator var5 = java2.util2.Collections.reverseOrder();
    java.lang.Object var6 = java2.util2.Collections.min(var4, var5);
    java2.util2.Comparator var7 = java2.util2.Collections.reverseOrder();
    java.lang.Object var8 = java2.util2.Collections.max(var4, var7);
    java2.util2.Collection var9 = java2.util2.Collections.unmodifiableCollection(var4);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var4);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)'a');
    int var13 = java2.util2.Collections.lastIndexOfSubList(var10, var12);
    java2.util2.List var14 = java2.util2.Collections.nCopies(1, (java.lang.Object)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + 10L+ "'", var6.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + 10L+ "'", var8.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test183() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Collection var3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.min(var3, var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.max(var3, var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var3);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var10 = java2.util2.Collections.unmodifiableList(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var12 = java2.util2.Collections.binarySearch(var9, (java.lang.Object)(byte)(-1));
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test184() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.Comparator var27 = java2.util2.Collections.reverseOrder();
    java.lang.Object var28 = java2.util2.Collections.max((java2.util2.Collection)var4, var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test185() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var17 = var4.toArray();
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)var4, 1, 0);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test186() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)(-1.0d));
    java2.util2.List var7 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test187() throws Throwable {

    java2.util2.List var2 = java2.util2.Collections.nCopies(100, (java.lang.Object)1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.Enumeration var6 = java2.util2.Collections.enumeration((java2.util2.Collection)var4);
    java2.util2.ArrayList var7 = java2.util2.Collections.list(var6);
    java2.util2.Set var9 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    java2.util2.Collection var11 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var9);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.min(var11, var12);
    java2.util2.Comparator var14 = java2.util2.Collections.reverseOrder();
    java.lang.Object var15 = java2.util2.Collections.max(var11, var14);
    java2.util2.Collection var16 = java2.util2.Collections.unmodifiableCollection(var11);
    java2.util2.List var17 = java2.util2.Collections.singletonList((java.lang.Object)var11);
    java2.util2.List var18 = java2.util2.Collections.unmodifiableList(var17);
    java2.util2.Collections.copy((java2.util2.List)var7, var17);
    java.lang.Object[] var21 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var22 = var7.toArray(var21);
    boolean var25 = java2.util2.Collections.replaceAll((java2.util2.List)var7, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java2.util2.Collections.fill((java2.util2.List)var7, (java.lang.Object)(byte)(-1));
    java2.util2.Set var29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var29);
    boolean var31 = var7.retainAll(var30);
    java2.util2.TreeSet var32 = new java2.util2.TreeSet(var30);
    java2.util2.List var33 = java2.util2.Collections.singletonList((java.lang.Object)var30);
    java2.util2.Set var35 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var36 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var35);
    java2.util2.Collection var37 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var35);
    java2.util2.Comparator var38 = java2.util2.Collections.reverseOrder();
    java.lang.Object var39 = java2.util2.Collections.min(var37, var38);
    java2.util2.Comparator var40 = java2.util2.Collections.reverseOrder();
    java.lang.Object var41 = java2.util2.Collections.max(var37, var40);
    java2.util2.Collection var42 = java2.util2.Collections.unmodifiableCollection(var37);
    java2.util2.List var43 = java2.util2.Collections.singletonList((java.lang.Object)var37);
    java2.util2.List var44 = java2.util2.Collections.unmodifiableList(var43);
    java2.util2.TreeSet var45 = new java2.util2.TreeSet();
    boolean var47 = var45.add((java.lang.Object)1);
    java2.util2.Set var49 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var50 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var49);
    java2.util2.Collection var51 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var49);
    java2.util2.Comparator var52 = java2.util2.Collections.reverseOrder();
    java.lang.Object var53 = java2.util2.Collections.min(var51, var52);
    boolean var54 = var45.removeAll(var51);
    java2.util2.Set var56 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var57 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var56);
    java2.util2.Collection var58 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var56);
    java2.util2.Comparator var59 = java2.util2.Collections.reverseOrder();
    java.lang.Object var60 = java2.util2.Collections.min(var58, var59);
    java2.util2.Comparator var61 = java2.util2.Collections.reverseOrder();
    java.lang.Object var62 = java2.util2.Collections.max(var58, var61);
    boolean var63 = java2.util2.Collections.replaceAll(var44, (java.lang.Object)var45, (java.lang.Object)var58);
    java2.util2.Enumeration var64 = java2.util2.Collections.enumeration((java2.util2.Collection)var45);
    boolean var65 = java2.util2.Collections.replaceAll(var2, (java.lang.Object)var30, (java.lang.Object)var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10L+ "'", var13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + 10L+ "'", var15.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var32.toString(),"[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + 10L+ "'", var39.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10L+ "'", var41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var45.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + 10L+ "'", var53.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + 10L+ "'", var60.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + 10L+ "'", var62.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test188() throws Throwable {

    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Enumeration var4 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.Collection var9 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var7);
    java2.util2.Comparator var10 = java2.util2.Collections.reverseOrder();
    java.lang.Object var11 = java2.util2.Collections.min(var9, var10);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.max(var9, var12);
    java2.util2.Collection var14 = java2.util2.Collections.unmodifiableCollection(var9);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var5, var15);
    java.lang.Object[] var19 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var20 = var5.toArray(var19);
    java2.util2.List var21 = java2.util2.Collections.synchronizedList((java2.util2.List)var5);
    java2.util2.List var22 = java2.util2.Collections.synchronizedList((java2.util2.List)var5);
    java2.util2.List var23 = java2.util2.Collections.nCopies(10, (java.lang.Object)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 10L+ "'", var11.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10L+ "'", var13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test189() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Enumeration var32 = java2.util2.Collections.enumeration((java2.util2.Collection)var30);
    java2.util2.ArrayList var33 = java2.util2.Collections.list(var32);
    java2.util2.Set var35 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var36 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var35);
    java2.util2.Collection var37 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var35);
    java2.util2.Comparator var38 = java2.util2.Collections.reverseOrder();
    java.lang.Object var39 = java2.util2.Collections.min(var37, var38);
    java2.util2.Comparator var40 = java2.util2.Collections.reverseOrder();
    java.lang.Object var41 = java2.util2.Collections.max(var37, var40);
    java2.util2.Collection var42 = java2.util2.Collections.unmodifiableCollection(var37);
    java2.util2.List var43 = java2.util2.Collections.singletonList((java.lang.Object)var37);
    java2.util2.List var44 = java2.util2.Collections.unmodifiableList(var43);
    java2.util2.Collections.copy((java2.util2.List)var33, var43);
    java.lang.Object[] var46 = var33.toArray();
    java2.util2.List var47 = java2.util2.Collections.synchronizedList((java2.util2.List)var33);
    boolean var48 = var27.equals((java.lang.Object)var33);
    java2.util2.Iterator var49 = var27.iterator();
    java2.util2.Map var51 = java2.util2.Collections.singletonMap((java.lang.Object)var27, (java.lang.Object)1.0d);
    java2.util2.Map var52 = java2.util2.Collections.unmodifiableMap(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + 10L+ "'", var39.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10L+ "'", var41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test190() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)(byte)(-1));
    java2.util2.Set var26 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var27 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var26);
    boolean var28 = var4.retainAll(var27);
    java2.util2.Collections.sort((java2.util2.List)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);

  }

  public void test191() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    int var29 = var27.size();
    java2.util2.Set var30 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)var27);
    java2.util2.Comparator var31 = java2.util2.Collections.reverseOrder();
    java.lang.Object var32 = java2.util2.Collections.max((java2.util2.Collection)var30, var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test192() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Iterator var29 = var27.iterator();
    boolean var30 = var27.isEmpty();
    java2.util2.Set var32 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var33 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var32);
    java2.util2.Enumeration var34 = java2.util2.Collections.enumeration((java2.util2.Collection)var32);
    java2.util2.ArrayList var35 = java2.util2.Collections.list(var34);
    java2.util2.Set var37 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var38 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var37);
    java2.util2.Collection var39 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var37);
    java2.util2.Comparator var40 = java2.util2.Collections.reverseOrder();
    java.lang.Object var41 = java2.util2.Collections.min(var39, var40);
    java2.util2.Comparator var42 = java2.util2.Collections.reverseOrder();
    java.lang.Object var43 = java2.util2.Collections.max(var39, var42);
    java2.util2.Collection var44 = java2.util2.Collections.unmodifiableCollection(var39);
    java2.util2.List var45 = java2.util2.Collections.singletonList((java.lang.Object)var39);
    java2.util2.List var46 = java2.util2.Collections.unmodifiableList(var45);
    java2.util2.Collections.copy((java2.util2.List)var35, var45);
    java.lang.Object[] var49 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var50 = var35.toArray(var49);
    boolean var53 = java2.util2.Collections.replaceAll((java2.util2.List)var35, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var54 = var35.toString();
    java2.util2.List var55 = java2.util2.Collections.unmodifiableList((java2.util2.List)var35);
    java.lang.String var56 = var35.toString();
    java2.util2.Collection var57 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var35);
    java2.util2.TreeSet var58 = new java2.util2.TreeSet(var57);
    java.lang.Object var59 = var58.clone();
    java2.util2.Iterator var60 = var58.iterator();
    java2.util2.SortedSet var61 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var58);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var62 = var27.tailSet((java.lang.Object)var58);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10L+ "'", var41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + 10L+ "'", var43.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "[[10]]"+ "'", var54.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "[[10]]"+ "'", var56.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var58.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test193() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java.lang.Object[] var26 = var4.toArray();
    java2.util2.List var27 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test194() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java2.util2.Collections.reverse(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test195() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java2.util2.TreeSet var17 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var17);
    java2.util2.Set var20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var20);
    java2.util2.Collection var22 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var20);
    java2.util2.Comparator var23 = java2.util2.Collections.reverseOrder();
    java.lang.Object var24 = java2.util2.Collections.min(var22, var23);
    java2.util2.Comparator var25 = java2.util2.Collections.reverseOrder();
    java.lang.Object var26 = java2.util2.Collections.max(var22, var25);
    java2.util2.Collection var27 = java2.util2.Collections.unmodifiableCollection(var22);
    java2.util2.List var28 = java2.util2.Collections.singletonList((java.lang.Object)var22);
    java2.util2.Collections.copy((java2.util2.List)var4, var28);
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.Enumeration var33 = java2.util2.Collections.enumeration((java2.util2.Collection)var31);
    java2.util2.ArrayList var34 = java2.util2.Collections.list(var33);
    java2.util2.Set var36 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var37 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var36);
    java2.util2.Collection var38 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var36);
    java2.util2.Comparator var39 = java2.util2.Collections.reverseOrder();
    java.lang.Object var40 = java2.util2.Collections.min(var38, var39);
    java2.util2.Comparator var41 = java2.util2.Collections.reverseOrder();
    java.lang.Object var42 = java2.util2.Collections.max(var38, var41);
    java2.util2.Collection var43 = java2.util2.Collections.unmodifiableCollection(var38);
    java2.util2.List var44 = java2.util2.Collections.singletonList((java.lang.Object)var38);
    java2.util2.List var45 = java2.util2.Collections.unmodifiableList(var44);
    java2.util2.Collections.copy((java2.util2.List)var34, var44);
    java.lang.Object[] var48 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var49 = var34.toArray(var48);
    boolean var52 = java2.util2.Collections.replaceAll((java2.util2.List)var34, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var53 = var34.toString();
    java2.util2.List var54 = java2.util2.Collections.unmodifiableList((java2.util2.List)var34);
    java.lang.String var55 = var34.toString();
    java2.util2.Collection var56 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var34);
    int var57 = java2.util2.Collections.lastIndexOfSubList(var28, (java2.util2.List)var34);
    java2.util2.Set var59 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var60 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var59);
    java2.util2.Enumeration var61 = java2.util2.Collections.enumeration((java2.util2.Collection)var59);
    java2.util2.ArrayList var62 = java2.util2.Collections.list(var61);
    java2.util2.Set var64 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var65 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var64);
    java2.util2.Collection var66 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var64);
    java2.util2.Comparator var67 = java2.util2.Collections.reverseOrder();
    java.lang.Object var68 = java2.util2.Collections.min(var66, var67);
    java2.util2.Comparator var69 = java2.util2.Collections.reverseOrder();
    java.lang.Object var70 = java2.util2.Collections.max(var66, var69);
    java2.util2.Collection var71 = java2.util2.Collections.unmodifiableCollection(var66);
    java2.util2.List var72 = java2.util2.Collections.singletonList((java.lang.Object)var66);
    java2.util2.List var73 = java2.util2.Collections.unmodifiableList(var72);
    java2.util2.Collections.copy((java2.util2.List)var62, var72);
    java.lang.Object[] var76 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var77 = var62.toArray(var76);
    boolean var80 = java2.util2.Collections.replaceAll((java2.util2.List)var62, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var81 = var62.toString();
    java2.util2.List var82 = java2.util2.Collections.unmodifiableList((java2.util2.List)var62);
    java.lang.String var83 = var62.toString();
    java2.util2.Collection var84 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var62);
    java2.util2.Collections.copy((java2.util2.List)var34, (java2.util2.List)var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var17.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + 10L+ "'", var24.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + 10L+ "'", var26.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + 10L+ "'", var40.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + 10L+ "'", var42.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "[[10]]"+ "'", var53.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "[[10]]"+ "'", var55.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + 10L+ "'", var68.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + 10L+ "'", var70.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "[[10]]"+ "'", var81.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "[[10]]"+ "'", var83.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test196() throws Throwable {

    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Enumeration var4 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.Collection var9 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var7);
    java2.util2.Comparator var10 = java2.util2.Collections.reverseOrder();
    java.lang.Object var11 = java2.util2.Collections.min(var9, var10);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.max(var9, var12);
    java2.util2.Collection var14 = java2.util2.Collections.unmodifiableCollection(var9);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var5, var15);
    java2.util2.TreeSet var18 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var5, (java.lang.Object)var18);
    java2.util2.Set var21 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.Collection var23 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var21);
    java2.util2.Comparator var24 = java2.util2.Collections.reverseOrder();
    java.lang.Object var25 = java2.util2.Collections.min(var23, var24);
    java2.util2.Comparator var26 = java2.util2.Collections.reverseOrder();
    java.lang.Object var27 = java2.util2.Collections.max(var23, var26);
    java2.util2.Collection var28 = java2.util2.Collections.unmodifiableCollection(var23);
    java2.util2.List var29 = java2.util2.Collections.singletonList((java.lang.Object)var23);
    java2.util2.Collections.copy((java2.util2.List)var5, var29);
    java2.util2.Set var32 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var33 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var32);
    java2.util2.Enumeration var34 = java2.util2.Collections.enumeration((java2.util2.Collection)var32);
    java2.util2.ArrayList var35 = java2.util2.Collections.list(var34);
    java2.util2.Set var37 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var38 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var37);
    java2.util2.Collection var39 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var37);
    java2.util2.Comparator var40 = java2.util2.Collections.reverseOrder();
    java.lang.Object var41 = java2.util2.Collections.min(var39, var40);
    java2.util2.Comparator var42 = java2.util2.Collections.reverseOrder();
    java.lang.Object var43 = java2.util2.Collections.max(var39, var42);
    java2.util2.Collection var44 = java2.util2.Collections.unmodifiableCollection(var39);
    java2.util2.List var45 = java2.util2.Collections.singletonList((java.lang.Object)var39);
    java2.util2.List var46 = java2.util2.Collections.unmodifiableList(var45);
    java2.util2.Collections.copy((java2.util2.List)var35, var45);
    java.lang.Object[] var49 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var50 = var35.toArray(var49);
    boolean var53 = java2.util2.Collections.replaceAll((java2.util2.List)var35, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var54 = var35.toString();
    java2.util2.List var55 = java2.util2.Collections.unmodifiableList((java2.util2.List)var35);
    java.lang.String var56 = var35.toString();
    java2.util2.Collection var57 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var35);
    int var58 = java2.util2.Collections.lastIndexOfSubList(var29, (java2.util2.List)var35);
    java2.util2.List var59 = java2.util2.Collections.nCopies(10, (java.lang.Object)var35);
    java2.util2.Collections.rotate(var59, 10);
    java2.util2.Comparator var62 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var59, var62);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 10L+ "'", var11.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10L+ "'", var13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var18.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + 10L+ "'", var25.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + 10L+ "'", var27.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10L+ "'", var41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + 10L+ "'", var43.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "[[10]]"+ "'", var54.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "[[10]]"+ "'", var56.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test197() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java2.util2.Iterator var28 = var27.iterator();
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Enumeration var32 = java2.util2.Collections.enumeration((java2.util2.Collection)var30);
    java2.util2.ArrayList var33 = java2.util2.Collections.list(var32);
    java2.util2.Set var35 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var36 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var35);
    java2.util2.Collection var37 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var35);
    java2.util2.Comparator var38 = java2.util2.Collections.reverseOrder();
    java.lang.Object var39 = java2.util2.Collections.min(var37, var38);
    java2.util2.Comparator var40 = java2.util2.Collections.reverseOrder();
    java.lang.Object var41 = java2.util2.Collections.max(var37, var40);
    java2.util2.Collection var42 = java2.util2.Collections.unmodifiableCollection(var37);
    java2.util2.List var43 = java2.util2.Collections.singletonList((java.lang.Object)var37);
    java2.util2.List var44 = java2.util2.Collections.unmodifiableList(var43);
    java2.util2.Collections.copy((java2.util2.List)var33, var43);
    java2.util2.TreeSet var46 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var33, (java.lang.Object)var46);
    java2.util2.Set var49 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var50 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var49);
    java2.util2.Collection var51 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var49);
    java2.util2.Comparator var52 = java2.util2.Collections.reverseOrder();
    java.lang.Object var53 = java2.util2.Collections.min(var51, var52);
    java2.util2.Comparator var54 = java2.util2.Collections.reverseOrder();
    java.lang.Object var55 = java2.util2.Collections.max(var51, var54);
    java2.util2.Collection var56 = java2.util2.Collections.unmodifiableCollection(var51);
    java2.util2.List var57 = java2.util2.Collections.singletonList((java.lang.Object)var51);
    java2.util2.Collections.copy((java2.util2.List)var33, var57);
    java2.util2.List var59 = java2.util2.Collections.unmodifiableList((java2.util2.List)var33);
    java.lang.Object[] var61 = new java.lang.Object[] { 10.0f};
    java.lang.Object[] var62 = var33.toArray(var61);
    boolean var63 = var27.removeAll((java2.util2.Collection)var33);
    java2.util2.Set var65 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var66 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var65);
    java2.util2.Enumeration var67 = java2.util2.Collections.enumeration((java2.util2.Collection)var65);
    java2.util2.ArrayList var68 = java2.util2.Collections.list(var67);
    java2.util2.Set var70 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var71 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var70);
    java2.util2.Collection var72 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var70);
    java2.util2.Comparator var73 = java2.util2.Collections.reverseOrder();
    java.lang.Object var74 = java2.util2.Collections.min(var72, var73);
    java2.util2.Comparator var75 = java2.util2.Collections.reverseOrder();
    java.lang.Object var76 = java2.util2.Collections.max(var72, var75);
    java2.util2.Collection var77 = java2.util2.Collections.unmodifiableCollection(var72);
    java2.util2.List var78 = java2.util2.Collections.singletonList((java.lang.Object)var72);
    java2.util2.List var79 = java2.util2.Collections.unmodifiableList(var78);
    java2.util2.Collections.copy((java2.util2.List)var68, var78);
    java2.util2.TreeSet var81 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var68, (java.lang.Object)var81);
    java2.util2.Set var84 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var85 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var84);
    java2.util2.Collection var86 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var84);
    java2.util2.Comparator var87 = java2.util2.Collections.reverseOrder();
    java.lang.Object var88 = java2.util2.Collections.min(var86, var87);
    java2.util2.Comparator var89 = java2.util2.Collections.reverseOrder();
    java.lang.Object var90 = java2.util2.Collections.max(var86, var89);
    java2.util2.Collection var91 = java2.util2.Collections.unmodifiableCollection(var86);
    java2.util2.List var92 = java2.util2.Collections.singletonList((java.lang.Object)var86);
    java2.util2.Collections.copy((java2.util2.List)var68, var92);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var94 = var27.remove((java.lang.Object)var92);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + 10L+ "'", var39.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10L+ "'", var41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var46.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + 10L+ "'", var53.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + 10L+ "'", var55.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + 10L+ "'", var74.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + 10L+ "'", var76.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var81.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + 10L+ "'", var88.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + 10L+ "'", var90.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test198() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    int var29 = var27.size();
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.Enumeration var33 = java2.util2.Collections.enumeration((java2.util2.Collection)var31);
    java2.util2.ArrayList var34 = java2.util2.Collections.list(var33);
    java2.util2.Set var36 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var37 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var36);
    java2.util2.Collection var38 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var36);
    java2.util2.Comparator var39 = java2.util2.Collections.reverseOrder();
    java.lang.Object var40 = java2.util2.Collections.min(var38, var39);
    java2.util2.Comparator var41 = java2.util2.Collections.reverseOrder();
    java.lang.Object var42 = java2.util2.Collections.max(var38, var41);
    java2.util2.Collection var43 = java2.util2.Collections.unmodifiableCollection(var38);
    java2.util2.List var44 = java2.util2.Collections.singletonList((java.lang.Object)var38);
    java2.util2.List var45 = java2.util2.Collections.unmodifiableList(var44);
    java2.util2.Collections.copy((java2.util2.List)var34, var44);
    java.lang.Object[] var48 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var49 = var34.toArray(var48);
    java2.util2.List var50 = java2.util2.Collections.synchronizedList((java2.util2.List)var34);
    java2.util2.List var51 = java2.util2.Collections.synchronizedList((java2.util2.List)var34);
    java.lang.Object[] var52 = var34.toArray();
    boolean var53 = var27.equals((java.lang.Object)var52);
    java2.util2.Set var55 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var56 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var55);
    java2.util2.Enumeration var57 = java2.util2.Collections.enumeration((java2.util2.Collection)var55);
    java2.util2.ArrayList var58 = java2.util2.Collections.list(var57);
    java2.util2.Set var60 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var61 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var60);
    java2.util2.Collection var62 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var60);
    java2.util2.Comparator var63 = java2.util2.Collections.reverseOrder();
    java.lang.Object var64 = java2.util2.Collections.min(var62, var63);
    java2.util2.Comparator var65 = java2.util2.Collections.reverseOrder();
    java.lang.Object var66 = java2.util2.Collections.max(var62, var65);
    java2.util2.Collection var67 = java2.util2.Collections.unmodifiableCollection(var62);
    java2.util2.List var68 = java2.util2.Collections.singletonList((java.lang.Object)var62);
    java2.util2.List var69 = java2.util2.Collections.unmodifiableList(var68);
    java2.util2.Collections.copy((java2.util2.List)var58, var68);
    java.lang.Object[] var71 = var58.toArray();
    java2.util2.List var72 = java2.util2.Collections.synchronizedList((java2.util2.List)var58);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var73 = var27.headSet((java.lang.Object)var58);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + 10L+ "'", var40.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + 10L+ "'", var42.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + 10L+ "'", var64.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + 10L+ "'", var66.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test199() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.List var30 = java2.util2.Collections.singletonList((java.lang.Object)100L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var31 = var27.containsAll((java2.util2.Collection)var30);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test200() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Enumeration var32 = java2.util2.Collections.enumeration((java2.util2.Collection)var30);
    java2.util2.ArrayList var33 = java2.util2.Collections.list(var32);
    java2.util2.Set var35 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var36 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var35);
    java2.util2.Collection var37 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var35);
    java2.util2.Comparator var38 = java2.util2.Collections.reverseOrder();
    java.lang.Object var39 = java2.util2.Collections.min(var37, var38);
    java2.util2.Comparator var40 = java2.util2.Collections.reverseOrder();
    java.lang.Object var41 = java2.util2.Collections.max(var37, var40);
    java2.util2.Collection var42 = java2.util2.Collections.unmodifiableCollection(var37);
    java2.util2.List var43 = java2.util2.Collections.singletonList((java.lang.Object)var37);
    java2.util2.List var44 = java2.util2.Collections.unmodifiableList(var43);
    java2.util2.Collections.copy((java2.util2.List)var33, var43);
    java.lang.Object[] var46 = var33.toArray();
    java2.util2.List var47 = java2.util2.Collections.synchronizedList((java2.util2.List)var33);
    boolean var48 = var27.equals((java.lang.Object)var33);
    java.lang.Object var49 = var27.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + 10L+ "'", var39.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10L+ "'", var41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test201() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Iterator var29 = var27.iterator();
    java2.util2.TreeSet var30 = new java2.util2.TreeSet();
    java2.util2.TreeSet var31 = new java2.util2.TreeSet();
    java2.util2.Set var33 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var34 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var33);
    boolean var35 = var31.removeAll(var34);
    java2.util2.Comparator var36 = java2.util2.Collections.reverseOrder();
    java.lang.Object var37 = java2.util2.Collections.max(var34, var36);
    boolean var38 = var30.equals((java.lang.Object)var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var39 = var27.remove((java.lang.Object)var34);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var30.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var31.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + 10L+ "'", var37.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test202() throws Throwable {

    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Enumeration var4 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.Collection var9 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var7);
    java2.util2.Comparator var10 = java2.util2.Collections.reverseOrder();
    java.lang.Object var11 = java2.util2.Collections.min(var9, var10);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.max(var9, var12);
    java2.util2.Collection var14 = java2.util2.Collections.unmodifiableCollection(var9);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var5, var15);
    java2.util2.TreeSet var18 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var5, (java.lang.Object)var18);
    java2.util2.Set var21 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.Collection var23 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var21);
    java2.util2.Comparator var24 = java2.util2.Collections.reverseOrder();
    java.lang.Object var25 = java2.util2.Collections.min(var23, var24);
    java2.util2.Comparator var26 = java2.util2.Collections.reverseOrder();
    java.lang.Object var27 = java2.util2.Collections.max(var23, var26);
    java2.util2.Collection var28 = java2.util2.Collections.unmodifiableCollection(var23);
    java2.util2.List var29 = java2.util2.Collections.singletonList((java.lang.Object)var23);
    java2.util2.Collections.copy((java2.util2.List)var5, var29);
    java2.util2.List var31 = java2.util2.Collections.nCopies(1, (java.lang.Object)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 10L+ "'", var11.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10L+ "'", var13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var18.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + 10L+ "'", var25.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + 10L+ "'", var27.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test203() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    int var29 = var27.size();
    java2.util2.Set var30 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)var27);
    java.lang.Object var31 = var27.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test204() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.Set var25 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var26 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var25);
    java2.util2.Enumeration var27 = java2.util2.Collections.enumeration((java2.util2.Collection)var25);
    java2.util2.ArrayList var28 = java2.util2.Collections.list(var27);
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Collection var32 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var30);
    java2.util2.Comparator var33 = java2.util2.Collections.reverseOrder();
    java.lang.Object var34 = java2.util2.Collections.min(var32, var33);
    java2.util2.Comparator var35 = java2.util2.Collections.reverseOrder();
    java.lang.Object var36 = java2.util2.Collections.max(var32, var35);
    java2.util2.Collection var37 = java2.util2.Collections.unmodifiableCollection(var32);
    java2.util2.List var38 = java2.util2.Collections.singletonList((java.lang.Object)var32);
    java2.util2.List var39 = java2.util2.Collections.unmodifiableList(var38);
    java2.util2.Collections.copy((java2.util2.List)var28, var38);
    java2.util2.TreeSet var41 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var28, (java.lang.Object)var41);
    java2.util2.Set var44 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var45 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var44);
    java2.util2.Collection var46 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var44);
    java2.util2.Comparator var47 = java2.util2.Collections.reverseOrder();
    java.lang.Object var48 = java2.util2.Collections.min(var46, var47);
    java2.util2.Comparator var49 = java2.util2.Collections.reverseOrder();
    java.lang.Object var50 = java2.util2.Collections.max(var46, var49);
    java2.util2.Collection var51 = java2.util2.Collections.unmodifiableCollection(var46);
    java2.util2.List var52 = java2.util2.Collections.singletonList((java.lang.Object)var46);
    java2.util2.Collections.copy((java2.util2.List)var28, var52);
    java2.util2.List var54 = java2.util2.Collections.unmodifiableList((java2.util2.List)var28);
    java.lang.Object[] var56 = new java.lang.Object[] { 10.0f};
    java.lang.Object[] var57 = var28.toArray(var56);
    boolean var58 = var4.retainAll((java2.util2.Collection)var28);
    java2.util2.Collections.reverse((java2.util2.List)var28);
    java2.util2.Collections.rotate((java2.util2.List)var28, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + 10L+ "'", var34.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + 10L+ "'", var36.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var41.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + 10L+ "'", var48.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + 10L+ "'", var50.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);

  }

  public void test205() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.TreeSet var1 = new java2.util2.TreeSet();
    java2.util2.Set var3 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var4 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var3);
    boolean var5 = var1.removeAll(var4);
    java.lang.Object var6 = java2.util2.Collections.min(var4);
    boolean var7 = var0.removeAll(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var8 = java2.util2.Collections.max((java2.util2.Collection)var0);
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var1.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + 10L+ "'", var6.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test206() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.SortedSet var29 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var27);
    java2.util2.Comparator var30 = var27.comparator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var32 = var27.remove((java.lang.Object)0L);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }

  public void test207() throws Throwable {

    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Enumeration var4 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.Collection var9 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var7);
    java2.util2.Comparator var10 = java2.util2.Collections.reverseOrder();
    java.lang.Object var11 = java2.util2.Collections.min(var9, var10);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.max(var9, var12);
    java2.util2.Collection var14 = java2.util2.Collections.unmodifiableCollection(var9);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var5, var15);
    java2.util2.TreeSet var18 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var5, (java.lang.Object)var18);
    java2.util2.Set var21 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.Collection var23 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var21);
    java2.util2.Comparator var24 = java2.util2.Collections.reverseOrder();
    java.lang.Object var25 = java2.util2.Collections.min(var23, var24);
    java2.util2.Comparator var26 = java2.util2.Collections.reverseOrder();
    java.lang.Object var27 = java2.util2.Collections.max(var23, var26);
    java2.util2.Collection var28 = java2.util2.Collections.unmodifiableCollection(var23);
    java2.util2.List var29 = java2.util2.Collections.singletonList((java.lang.Object)var23);
    java2.util2.Collections.copy((java2.util2.List)var5, var29);
    java2.util2.Set var32 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var33 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var32);
    java2.util2.Enumeration var34 = java2.util2.Collections.enumeration((java2.util2.Collection)var32);
    java2.util2.ArrayList var35 = java2.util2.Collections.list(var34);
    java2.util2.Set var37 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var38 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var37);
    java2.util2.Collection var39 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var37);
    java2.util2.Comparator var40 = java2.util2.Collections.reverseOrder();
    java.lang.Object var41 = java2.util2.Collections.min(var39, var40);
    java2.util2.Comparator var42 = java2.util2.Collections.reverseOrder();
    java.lang.Object var43 = java2.util2.Collections.max(var39, var42);
    java2.util2.Collection var44 = java2.util2.Collections.unmodifiableCollection(var39);
    java2.util2.List var45 = java2.util2.Collections.singletonList((java.lang.Object)var39);
    java2.util2.List var46 = java2.util2.Collections.unmodifiableList(var45);
    java2.util2.Collections.copy((java2.util2.List)var35, var45);
    java.lang.Object[] var49 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var50 = var35.toArray(var49);
    boolean var53 = java2.util2.Collections.replaceAll((java2.util2.List)var35, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var54 = var35.toString();
    java2.util2.List var55 = java2.util2.Collections.unmodifiableList((java2.util2.List)var35);
    java.lang.String var56 = var35.toString();
    java2.util2.Collection var57 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var35);
    int var58 = java2.util2.Collections.lastIndexOfSubList(var29, (java2.util2.List)var35);
    java2.util2.List var59 = java2.util2.Collections.nCopies(10, (java.lang.Object)var35);
    java2.util2.Collections.rotate(var59, 10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var62 = java2.util2.Collections.min((java2.util2.Collection)var59);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 10L+ "'", var11.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10L+ "'", var13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var18.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + 10L+ "'", var25.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + 10L+ "'", var27.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10L+ "'", var41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + 10L+ "'", var43.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "[[10]]"+ "'", var54.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "[[10]]"+ "'", var56.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test208() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Iterator var29 = var27.iterator();
    java2.util2.TreeSet var31 = new java2.util2.TreeSet();
    java2.util2.Set var33 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var34 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var33);
    java2.util2.Collection var35 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var33);
    java2.util2.Comparator var36 = java2.util2.Collections.reverseOrder();
    java.lang.Object var37 = java2.util2.Collections.min(var35, var36);
    java2.util2.Comparator var38 = java2.util2.Collections.reverseOrder();
    java.lang.Object var39 = java2.util2.Collections.max(var35, var38);
    boolean var40 = var31.removeAll(var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var41 = var27.subSet((java.lang.Object)'#', (java.lang.Object)var31);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var31.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + 10L+ "'", var37.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + 10L+ "'", var39.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test209() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java2.util2.Iterator var28 = var27.iterator();
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Enumeration var32 = java2.util2.Collections.enumeration((java2.util2.Collection)var30);
    java2.util2.ArrayList var33 = java2.util2.Collections.list(var32);
    java2.util2.Set var35 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var36 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var35);
    java2.util2.Collection var37 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var35);
    java2.util2.Comparator var38 = java2.util2.Collections.reverseOrder();
    java.lang.Object var39 = java2.util2.Collections.min(var37, var38);
    java2.util2.Comparator var40 = java2.util2.Collections.reverseOrder();
    java.lang.Object var41 = java2.util2.Collections.max(var37, var40);
    java2.util2.Collection var42 = java2.util2.Collections.unmodifiableCollection(var37);
    java2.util2.List var43 = java2.util2.Collections.singletonList((java.lang.Object)var37);
    java2.util2.List var44 = java2.util2.Collections.unmodifiableList(var43);
    java2.util2.Collections.copy((java2.util2.List)var33, var43);
    java.lang.Object[] var47 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var48 = var33.toArray(var47);
    boolean var51 = java2.util2.Collections.replaceAll((java2.util2.List)var33, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var52 = var33.toString();
    java2.util2.List var53 = java2.util2.Collections.unmodifiableList((java2.util2.List)var33);
    java.lang.String var54 = var33.toString();
    java2.util2.Collection var55 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var33);
    java2.util2.TreeSet var56 = new java2.util2.TreeSet(var55);
    java.lang.Object var57 = var56.clone();
    java2.util2.Iterator var58 = var56.iterator();
    boolean var59 = var56.isEmpty();
    java2.util2.Set var60 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var56);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var61 = var27.add((java.lang.Object)var60);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + 10L+ "'", var39.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10L+ "'", var41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "[[10]]"+ "'", var52.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "[[10]]"+ "'", var54.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var56.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test210() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Collection var3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.min(var3, var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.max(var3, var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var3);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var10 = java2.util2.Collections.unmodifiableList(var9);
    java2.util2.TreeSet var12 = new java2.util2.TreeSet();
    java.lang.Object[] var14 = new java.lang.Object[] { (-1L)};
    java.lang.Object[] var15 = var12.toArray(var14);
    boolean var16 = java2.util2.Collections.replaceAll(var9, (java.lang.Object)(short)0, (java.lang.Object)var12);
    java2.util2.Set var18 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var19 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var18);
    java2.util2.Enumeration var20 = java2.util2.Collections.enumeration((java2.util2.Collection)var18);
    java2.util2.ArrayList var21 = java2.util2.Collections.list(var20);
    java2.util2.Set var23 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var23);
    java2.util2.Collection var25 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var23);
    java2.util2.Comparator var26 = java2.util2.Collections.reverseOrder();
    java.lang.Object var27 = java2.util2.Collections.min(var25, var26);
    java2.util2.Comparator var28 = java2.util2.Collections.reverseOrder();
    java.lang.Object var29 = java2.util2.Collections.max(var25, var28);
    java2.util2.Collection var30 = java2.util2.Collections.unmodifiableCollection(var25);
    java2.util2.List var31 = java2.util2.Collections.singletonList((java.lang.Object)var25);
    java2.util2.List var32 = java2.util2.Collections.unmodifiableList(var31);
    java2.util2.Collections.copy((java2.util2.List)var21, var31);
    java.lang.Object[] var35 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var36 = var21.toArray(var35);
    boolean var39 = java2.util2.Collections.replaceAll((java2.util2.List)var21, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var40 = var21.toString();
    java2.util2.List var41 = java2.util2.Collections.unmodifiableList((java2.util2.List)var21);
    java2.util2.Comparator var42 = java2.util2.Collections.reverseOrder();
    java.lang.Object var43 = java2.util2.Collections.max((java2.util2.Collection)var21, var42);
    java2.util2.Collections.rotate((java2.util2.List)var21, 1);
    int var46 = java2.util2.Collections.indexOfSubList(var9, (java2.util2.List)var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var12.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + 10L+ "'", var27.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + 10L+ "'", var29.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "[[10]]"+ "'", var40.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));

  }

  public void test211() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java2.util2.TreeSet var17 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var17);
    java2.util2.Set var20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var20);
    java2.util2.Collection var22 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var20);
    java2.util2.Comparator var23 = java2.util2.Collections.reverseOrder();
    java.lang.Object var24 = java2.util2.Collections.min(var22, var23);
    java2.util2.Comparator var25 = java2.util2.Collections.reverseOrder();
    java.lang.Object var26 = java2.util2.Collections.max(var22, var25);
    java2.util2.Collection var27 = java2.util2.Collections.unmodifiableCollection(var22);
    java2.util2.List var28 = java2.util2.Collections.singletonList((java.lang.Object)var22);
    java2.util2.Collections.copy((java2.util2.List)var4, var28);
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.Enumeration var33 = java2.util2.Collections.enumeration((java2.util2.Collection)var31);
    java2.util2.ArrayList var34 = java2.util2.Collections.list(var33);
    java2.util2.Set var36 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var37 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var36);
    java2.util2.Collection var38 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var36);
    java2.util2.Comparator var39 = java2.util2.Collections.reverseOrder();
    java.lang.Object var40 = java2.util2.Collections.min(var38, var39);
    java2.util2.Comparator var41 = java2.util2.Collections.reverseOrder();
    java.lang.Object var42 = java2.util2.Collections.max(var38, var41);
    java2.util2.Collection var43 = java2.util2.Collections.unmodifiableCollection(var38);
    java2.util2.List var44 = java2.util2.Collections.singletonList((java.lang.Object)var38);
    java2.util2.List var45 = java2.util2.Collections.unmodifiableList(var44);
    java2.util2.Collections.copy((java2.util2.List)var34, var44);
    java.lang.Object[] var48 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var49 = var34.toArray(var48);
    boolean var52 = java2.util2.Collections.replaceAll((java2.util2.List)var34, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var53 = var34.toString();
    java2.util2.List var54 = java2.util2.Collections.unmodifiableList((java2.util2.List)var34);
    java.lang.String var55 = var34.toString();
    java2.util2.Collection var56 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var34);
    int var57 = java2.util2.Collections.lastIndexOfSubList(var28, (java2.util2.List)var34);
    java2.util2.List var58 = java2.util2.Collections.unmodifiableList((java2.util2.List)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var17.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + 10L+ "'", var24.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + 10L+ "'", var26.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + 10L+ "'", var40.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + 10L+ "'", var42.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "[[10]]"+ "'", var53.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "[[10]]"+ "'", var55.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test212() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)(-1.0d));
    java2.util2.Set var8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var8);
    java2.util2.Enumeration var10 = java2.util2.Collections.enumeration((java2.util2.Collection)var8);
    java2.util2.ArrayList var11 = java2.util2.Collections.list(var10);
    java2.util2.Set var13 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var13);
    java2.util2.Collection var15 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var13);
    java2.util2.Comparator var16 = java2.util2.Collections.reverseOrder();
    java.lang.Object var17 = java2.util2.Collections.min(var15, var16);
    java2.util2.Comparator var18 = java2.util2.Collections.reverseOrder();
    java.lang.Object var19 = java2.util2.Collections.max(var15, var18);
    java2.util2.Collection var20 = java2.util2.Collections.unmodifiableCollection(var15);
    java2.util2.List var21 = java2.util2.Collections.singletonList((java.lang.Object)var15);
    java2.util2.List var22 = java2.util2.Collections.unmodifiableList(var21);
    java2.util2.Collections.copy((java2.util2.List)var11, var21);
    java.lang.Object[] var25 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var26 = var11.toArray(var25);
    boolean var29 = java2.util2.Collections.replaceAll((java2.util2.List)var11, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var30 = var11.toString();
    java2.util2.List var31 = java2.util2.Collections.unmodifiableList((java2.util2.List)var11);
    java.lang.String var32 = var11.toString();
    java.lang.Object[] var33 = var11.toArray();
    int var34 = java2.util2.Collections.lastIndexOfSubList((java2.util2.List)var4, (java2.util2.List)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + 10L+ "'", var17.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + 10L+ "'", var19.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[[10]]"+ "'", var30.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[[10]]"+ "'", var32.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1));

  }

  public void test213() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Map var2 = java2.util2.Collections.singletonMap((java.lang.Object)var0, (java.lang.Object)(-1));
    java2.util2.Map var3 = java2.util2.Collections.unmodifiableMap(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test214() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.Set var25 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var26 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var25);
    java2.util2.Enumeration var27 = java2.util2.Collections.enumeration((java2.util2.Collection)var25);
    java2.util2.ArrayList var28 = java2.util2.Collections.list(var27);
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Collection var32 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var30);
    java2.util2.Comparator var33 = java2.util2.Collections.reverseOrder();
    java.lang.Object var34 = java2.util2.Collections.min(var32, var33);
    java2.util2.Comparator var35 = java2.util2.Collections.reverseOrder();
    java.lang.Object var36 = java2.util2.Collections.max(var32, var35);
    java2.util2.Collection var37 = java2.util2.Collections.unmodifiableCollection(var32);
    java2.util2.List var38 = java2.util2.Collections.singletonList((java.lang.Object)var32);
    java2.util2.List var39 = java2.util2.Collections.unmodifiableList(var38);
    java2.util2.Collections.copy((java2.util2.List)var28, var38);
    java2.util2.TreeSet var41 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var28, (java.lang.Object)var41);
    java2.util2.Set var44 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var45 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var44);
    java2.util2.Collection var46 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var44);
    java2.util2.Comparator var47 = java2.util2.Collections.reverseOrder();
    java.lang.Object var48 = java2.util2.Collections.min(var46, var47);
    java2.util2.Comparator var49 = java2.util2.Collections.reverseOrder();
    java.lang.Object var50 = java2.util2.Collections.max(var46, var49);
    java2.util2.Collection var51 = java2.util2.Collections.unmodifiableCollection(var46);
    java2.util2.List var52 = java2.util2.Collections.singletonList((java.lang.Object)var46);
    java2.util2.Collections.copy((java2.util2.List)var28, var52);
    java2.util2.List var54 = java2.util2.Collections.unmodifiableList((java2.util2.List)var28);
    java.lang.Object[] var56 = new java.lang.Object[] { 10.0f};
    java.lang.Object[] var57 = var28.toArray(var56);
    boolean var58 = var4.retainAll((java2.util2.Collection)var28);
    java2.util2.Collections.reverse((java2.util2.List)var28);
    java2.util2.Set var61 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var62 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var61);
    java2.util2.Enumeration var63 = java2.util2.Collections.enumeration((java2.util2.Collection)var61);
    java2.util2.ArrayList var64 = java2.util2.Collections.list(var63);
    java2.util2.Set var66 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var67 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var66);
    java2.util2.Collection var68 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var66);
    java2.util2.Comparator var69 = java2.util2.Collections.reverseOrder();
    java.lang.Object var70 = java2.util2.Collections.min(var68, var69);
    java2.util2.Comparator var71 = java2.util2.Collections.reverseOrder();
    java.lang.Object var72 = java2.util2.Collections.max(var68, var71);
    java2.util2.Collection var73 = java2.util2.Collections.unmodifiableCollection(var68);
    java2.util2.List var74 = java2.util2.Collections.singletonList((java.lang.Object)var68);
    java2.util2.List var75 = java2.util2.Collections.unmodifiableList(var74);
    java2.util2.Collections.copy((java2.util2.List)var64, var74);
    java.lang.Object[] var78 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var79 = var64.toArray(var78);
    boolean var82 = java2.util2.Collections.replaceAll((java2.util2.List)var64, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var83 = var64.toString();
    java2.util2.List var84 = java2.util2.Collections.unmodifiableList((java2.util2.List)var64);
    java.lang.String var85 = var64.toString();
    java2.util2.Collection var86 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var64);
    java2.util2.TreeSet var87 = new java2.util2.TreeSet(var86);
    java.lang.Object var88 = var87.clone();
    int var89 = var87.size();
    java.lang.Object var90 = var87.clone();
    java2.util2.Comparator var91 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var92 = java2.util2.Collections.binarySearch((java2.util2.List)var28, var90, var91);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + 10L+ "'", var34.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + 10L+ "'", var36.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var41.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + 10L+ "'", var48.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + 10L+ "'", var50.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + 10L+ "'", var70.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + 10L+ "'", var72.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "[[10]]"+ "'", var83.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "[[10]]"+ "'", var85.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var87.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test215() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var17 = var4.toArray();
    java2.util2.List var18 = java2.util2.Collections.synchronizedList((java2.util2.List)var4);
    java2.util2.Comparator var19 = java2.util2.Collections.reverseOrder();
    java.lang.Object var20 = java2.util2.Collections.max((java2.util2.Collection)var4, var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test216() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java.lang.String var5 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[10]"+ "'", var5.equals("[10]"));

  }

  public void test217() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    int var29 = var27.size();
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.Enumeration var33 = java2.util2.Collections.enumeration((java2.util2.Collection)var31);
    java2.util2.ArrayList var34 = java2.util2.Collections.list(var33);
    java2.util2.Set var36 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var37 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var36);
    java2.util2.Collection var38 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var36);
    java2.util2.Comparator var39 = java2.util2.Collections.reverseOrder();
    java.lang.Object var40 = java2.util2.Collections.min(var38, var39);
    java2.util2.Comparator var41 = java2.util2.Collections.reverseOrder();
    java.lang.Object var42 = java2.util2.Collections.max(var38, var41);
    java2.util2.Collection var43 = java2.util2.Collections.unmodifiableCollection(var38);
    java2.util2.List var44 = java2.util2.Collections.singletonList((java.lang.Object)var38);
    java2.util2.List var45 = java2.util2.Collections.unmodifiableList(var44);
    java2.util2.Collections.copy((java2.util2.List)var34, var44);
    java.lang.Object[] var48 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var49 = var34.toArray(var48);
    java2.util2.List var50 = java2.util2.Collections.synchronizedList((java2.util2.List)var34);
    java2.util2.List var51 = java2.util2.Collections.synchronizedList((java2.util2.List)var34);
    java.lang.Object[] var52 = var34.toArray();
    boolean var53 = var27.equals((java.lang.Object)var52);
    java2.util2.Set var55 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var56 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var55);
    java2.util2.Enumeration var57 = java2.util2.Collections.enumeration((java2.util2.Collection)var55);
    java2.util2.ArrayList var58 = java2.util2.Collections.list(var57);
    java2.util2.Set var60 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var61 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var60);
    java2.util2.Collection var62 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var60);
    java2.util2.Comparator var63 = java2.util2.Collections.reverseOrder();
    java.lang.Object var64 = java2.util2.Collections.min(var62, var63);
    java2.util2.Comparator var65 = java2.util2.Collections.reverseOrder();
    java.lang.Object var66 = java2.util2.Collections.max(var62, var65);
    java2.util2.Collection var67 = java2.util2.Collections.unmodifiableCollection(var62);
    java2.util2.List var68 = java2.util2.Collections.singletonList((java.lang.Object)var62);
    java2.util2.List var69 = java2.util2.Collections.unmodifiableList(var68);
    java2.util2.Collections.copy((java2.util2.List)var58, var68);
    java.lang.Object[] var71 = var58.toArray();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var72 = var27.remove((java.lang.Object)var58);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + 10L+ "'", var40.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + 10L+ "'", var42.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + 10L+ "'", var64.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + 10L+ "'", var66.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test218() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java2.util2.Set var24 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var24);
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var24);
    java2.util2.Comparator var27 = java2.util2.Collections.reverseOrder();
    java.lang.Object var28 = java2.util2.Collections.min(var26, var27);
    java2.util2.Comparator var29 = java2.util2.Collections.reverseOrder();
    java.lang.Object var30 = java2.util2.Collections.max(var26, var29);
    boolean var31 = var4.containsAll(var26);
    java2.util2.Set var33 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var34 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var33);
    java2.util2.Collection var35 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var33);
    java2.util2.Comparator var36 = java2.util2.Collections.reverseOrder();
    java.lang.Object var37 = java2.util2.Collections.min(var35, var36);
    java2.util2.Comparator var38 = java2.util2.Collections.reverseOrder();
    java.lang.Object var39 = java2.util2.Collections.max(var35, var38);
    java2.util2.Comparator var40 = java2.util2.Collections.reverseOrder();
    java.lang.Object var41 = java2.util2.Collections.max(var35, var40);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var42 = java2.util2.Collections.binarySearch((java2.util2.List)var4, (java.lang.Object)var35);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + 10L+ "'", var28.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + 10L+ "'", var30.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + 10L+ "'", var37.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + 10L+ "'", var39.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10L+ "'", var41.equals(10L));

  }

  public void test219() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Iterator var29 = var27.iterator();
    java.lang.Object[] var30 = var27.toArray();
    boolean var31 = var27.isEmpty();
    int var32 = var27.size();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var33 = java2.util2.Collections.min((java2.util2.Collection)var27);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);

  }

  public void test220() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.SortedSet var29 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var27);
    java2.util2.Comparator var30 = var27.comparator();
    java.lang.Object var31 = var27.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test221() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var17 = var4.toArray();
    java2.util2.Collections.reverse((java2.util2.List)var4);
    java2.util2.Set var20 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var21 = java2.util2.Collections.singleton((java.lang.Object)var20);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var21);
    java2.util2.Enumeration var23 = java2.util2.Collections.enumeration((java2.util2.Collection)var21);
    java2.util2.ArrayList var24 = java2.util2.Collections.list(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test222() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.Set var25 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var26 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var25);
    java2.util2.Enumeration var27 = java2.util2.Collections.enumeration((java2.util2.Collection)var25);
    java2.util2.ArrayList var28 = java2.util2.Collections.list(var27);
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Collection var32 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var30);
    java2.util2.Comparator var33 = java2.util2.Collections.reverseOrder();
    java.lang.Object var34 = java2.util2.Collections.min(var32, var33);
    java2.util2.Comparator var35 = java2.util2.Collections.reverseOrder();
    java.lang.Object var36 = java2.util2.Collections.max(var32, var35);
    java2.util2.Collection var37 = java2.util2.Collections.unmodifiableCollection(var32);
    java2.util2.List var38 = java2.util2.Collections.singletonList((java.lang.Object)var32);
    java2.util2.List var39 = java2.util2.Collections.unmodifiableList(var38);
    java2.util2.Collections.copy((java2.util2.List)var28, var38);
    java2.util2.TreeSet var41 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var28, (java.lang.Object)var41);
    java2.util2.Set var44 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var45 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var44);
    java2.util2.Collection var46 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var44);
    java2.util2.Comparator var47 = java2.util2.Collections.reverseOrder();
    java.lang.Object var48 = java2.util2.Collections.min(var46, var47);
    java2.util2.Comparator var49 = java2.util2.Collections.reverseOrder();
    java.lang.Object var50 = java2.util2.Collections.max(var46, var49);
    java2.util2.Collection var51 = java2.util2.Collections.unmodifiableCollection(var46);
    java2.util2.List var52 = java2.util2.Collections.singletonList((java.lang.Object)var46);
    java2.util2.Collections.copy((java2.util2.List)var28, var52);
    java2.util2.List var54 = java2.util2.Collections.unmodifiableList((java2.util2.List)var28);
    java.lang.Object[] var56 = new java.lang.Object[] { 10.0f};
    java.lang.Object[] var57 = var28.toArray(var56);
    boolean var58 = var4.retainAll((java2.util2.Collection)var28);
    java2.util2.Set var60 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var61 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var60);
    java2.util2.Enumeration var62 = java2.util2.Collections.enumeration((java2.util2.Collection)var60);
    java2.util2.ArrayList var63 = java2.util2.Collections.list(var62);
    java2.util2.Set var65 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var66 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var65);
    java2.util2.Collection var67 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var65);
    java2.util2.Comparator var68 = java2.util2.Collections.reverseOrder();
    java.lang.Object var69 = java2.util2.Collections.min(var67, var68);
    java2.util2.Comparator var70 = java2.util2.Collections.reverseOrder();
    java.lang.Object var71 = java2.util2.Collections.max(var67, var70);
    java2.util2.Collection var72 = java2.util2.Collections.unmodifiableCollection(var67);
    java2.util2.List var73 = java2.util2.Collections.singletonList((java.lang.Object)var67);
    java2.util2.List var74 = java2.util2.Collections.unmodifiableList(var73);
    java2.util2.Collections.copy((java2.util2.List)var63, var73);
    java.lang.Object[] var77 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var78 = var63.toArray(var77);
    boolean var81 = java2.util2.Collections.replaceAll((java2.util2.List)var63, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java2.util2.Collections.fill((java2.util2.List)var63, (java.lang.Object)(byte)(-1));
    java2.util2.Set var85 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var86 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var85);
    boolean var87 = var63.retainAll(var86);
    java2.util2.TreeSet var88 = new java2.util2.TreeSet(var86);
    int var89 = java2.util2.Collections.binarySearch((java2.util2.List)var4, (java.lang.Object)var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + 10L+ "'", var34.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + 10L+ "'", var36.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var41.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + 10L+ "'", var48.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + 10L+ "'", var50.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + 10L+ "'", var69.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + 10L+ "'", var71.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var88.toString(),"[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == (-1));

  }

  public void test223() throws Throwable {

    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Enumeration var4 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.Collection var9 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var7);
    java2.util2.Comparator var10 = java2.util2.Collections.reverseOrder();
    java.lang.Object var11 = java2.util2.Collections.min(var9, var10);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.max(var9, var12);
    java2.util2.Collection var14 = java2.util2.Collections.unmodifiableCollection(var9);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var5, var15);
    java.lang.Object[] var19 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var20 = var5.toArray(var19);
    java2.util2.List var21 = java2.util2.Collections.synchronizedList((java2.util2.List)var5);
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    java2.util2.List var23 = java2.util2.Collections.nCopies(10, (java.lang.Object)var22);
    java2.util2.Set var25 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var26 = java2.util2.Collections.singleton((java.lang.Object)var25);
    java2.util2.Enumeration var27 = java2.util2.Collections.enumeration((java2.util2.Collection)var25);
    java2.util2.ArrayList var28 = java2.util2.Collections.list(var27);
    java2.util2.Collections.fill((java2.util2.List)var28, (java.lang.Object)(-1.0d));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(var23, (java2.util2.List)var28);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 10L+ "'", var11.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10L+ "'", var13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test224() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java2.util2.Set var24 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var24);
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var24);
    java2.util2.Comparator var27 = java2.util2.Collections.reverseOrder();
    java.lang.Object var28 = java2.util2.Collections.min(var26, var27);
    java2.util2.Comparator var29 = java2.util2.Collections.reverseOrder();
    java.lang.Object var30 = java2.util2.Collections.max(var26, var29);
    boolean var31 = var4.containsAll(var26);
    java2.util2.Set var33 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var34 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var33);
    java2.util2.Enumeration var35 = java2.util2.Collections.enumeration((java2.util2.Collection)var33);
    java2.util2.ArrayList var36 = java2.util2.Collections.list(var35);
    java2.util2.Set var38 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var39 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var38);
    java2.util2.Collection var40 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var38);
    java2.util2.Comparator var41 = java2.util2.Collections.reverseOrder();
    java.lang.Object var42 = java2.util2.Collections.min(var40, var41);
    java2.util2.Comparator var43 = java2.util2.Collections.reverseOrder();
    java.lang.Object var44 = java2.util2.Collections.max(var40, var43);
    java2.util2.Collection var45 = java2.util2.Collections.unmodifiableCollection(var40);
    java2.util2.List var46 = java2.util2.Collections.singletonList((java.lang.Object)var40);
    java2.util2.List var47 = java2.util2.Collections.unmodifiableList(var46);
    java2.util2.Collections.copy((java2.util2.List)var36, var46);
    java.lang.Object[] var50 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var51 = var36.toArray(var50);
    boolean var54 = java2.util2.Collections.replaceAll((java2.util2.List)var36, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var55 = var36.toString();
    java2.util2.List var56 = java2.util2.Collections.unmodifiableList((java2.util2.List)var36);
    java.lang.String var57 = var36.toString();
    java2.util2.Collection var58 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var36);
    java2.util2.TreeSet var59 = new java2.util2.TreeSet(var58);
    java.lang.Object var60 = var59.clone();
    int var61 = var59.size();
    java.lang.Object var62 = var59.clone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var63 = java2.util2.Collections.binarySearch((java2.util2.List)var4, var62);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + 10L+ "'", var28.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + 10L+ "'", var30.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + 10L+ "'", var42.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + 10L+ "'", var44.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "[[10]]"+ "'", var55.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "[[10]]"+ "'", var57.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var59.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test225() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.Enumeration var6 = java2.util2.Collections.enumeration((java2.util2.Collection)var4);
    java2.util2.ArrayList var7 = java2.util2.Collections.list(var6);
    java2.util2.Set var9 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    java2.util2.Collection var11 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var9);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.min(var11, var12);
    java2.util2.Comparator var14 = java2.util2.Collections.reverseOrder();
    java.lang.Object var15 = java2.util2.Collections.max(var11, var14);
    java2.util2.Collection var16 = java2.util2.Collections.unmodifiableCollection(var11);
    java2.util2.List var17 = java2.util2.Collections.singletonList((java.lang.Object)var11);
    java2.util2.List var18 = java2.util2.Collections.unmodifiableList(var17);
    java2.util2.Collections.copy((java2.util2.List)var7, var17);
    java.lang.Object[] var21 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var22 = var7.toArray(var21);
    boolean var25 = java2.util2.Collections.replaceAll((java2.util2.List)var7, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var26 = var7.toString();
    java2.util2.List var27 = java2.util2.Collections.unmodifiableList((java2.util2.List)var7);
    java.lang.String var28 = var7.toString();
    java2.util2.Collection var29 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var7);
    java2.util2.TreeSet var30 = new java2.util2.TreeSet(var29);
    java.lang.Object var31 = var30.clone();
    java2.util2.Set var33 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var34 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var33);
    java2.util2.Enumeration var35 = java2.util2.Collections.enumeration((java2.util2.Collection)var33);
    java2.util2.ArrayList var36 = java2.util2.Collections.list(var35);
    java2.util2.Set var38 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var39 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var38);
    java2.util2.Collection var40 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var38);
    java2.util2.Comparator var41 = java2.util2.Collections.reverseOrder();
    java.lang.Object var42 = java2.util2.Collections.min(var40, var41);
    java2.util2.Comparator var43 = java2.util2.Collections.reverseOrder();
    java.lang.Object var44 = java2.util2.Collections.max(var40, var43);
    java2.util2.Collection var45 = java2.util2.Collections.unmodifiableCollection(var40);
    java2.util2.List var46 = java2.util2.Collections.singletonList((java.lang.Object)var40);
    java2.util2.List var47 = java2.util2.Collections.unmodifiableList(var46);
    java2.util2.Collections.copy((java2.util2.List)var36, var46);
    java.lang.Object[] var49 = var36.toArray();
    java2.util2.List var50 = java2.util2.Collections.synchronizedList((java2.util2.List)var36);
    boolean var51 = var30.equals((java.lang.Object)var36);
    boolean var52 = var0.equals((java.lang.Object)var30);
    java2.util2.Set var54 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var55 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var54);
    java2.util2.Collection var56 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var54);
    java2.util2.Comparator var57 = java2.util2.Collections.reverseOrder();
    java.lang.Object var58 = java2.util2.Collections.min(var56, var57);
    java2.util2.Comparator var59 = java2.util2.Collections.reverseOrder();
    java.lang.Object var60 = java2.util2.Collections.max(var56, var59);
    java2.util2.Collection var61 = java2.util2.Collections.unmodifiableCollection(var56);
    java2.util2.Comparator var62 = java2.util2.Collections.reverseOrder();
    java.lang.Object var63 = java2.util2.Collections.min(var56, var62);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var64 = var0.remove(var63);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10L+ "'", var13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + 10L+ "'", var15.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[[10]]"+ "'", var26.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[[10]]"+ "'", var28.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var30.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + 10L+ "'", var42.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + 10L+ "'", var44.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + 10L+ "'", var58.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + 10L+ "'", var60.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + 10L+ "'", var63.equals(10L));

  }

  public void test226() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java2.util2.Collections.rotate((java2.util2.List)var4, 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var19 = java2.util2.Collections.min((java2.util2.Collection)var4);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test227() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)(byte)(-1));
    java2.util2.Set var26 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var27 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var26);
    java2.util2.Enumeration var28 = java2.util2.Collections.enumeration((java2.util2.Collection)var26);
    java2.util2.ArrayList var29 = java2.util2.Collections.list(var28);
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.Collection var33 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var31);
    java2.util2.Comparator var34 = java2.util2.Collections.reverseOrder();
    java.lang.Object var35 = java2.util2.Collections.min(var33, var34);
    java2.util2.Comparator var36 = java2.util2.Collections.reverseOrder();
    java.lang.Object var37 = java2.util2.Collections.max(var33, var36);
    java2.util2.Collection var38 = java2.util2.Collections.unmodifiableCollection(var33);
    java2.util2.List var39 = java2.util2.Collections.singletonList((java.lang.Object)var33);
    java2.util2.List var40 = java2.util2.Collections.unmodifiableList(var39);
    java2.util2.Collections.copy((java2.util2.List)var29, var39);
    java2.util2.TreeSet var42 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var29, (java.lang.Object)var42);
    int var44 = java2.util2.Collections.lastIndexOfSubList((java2.util2.List)var4, (java2.util2.List)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + 10L+ "'", var35.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + 10L+ "'", var37.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var42.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));

  }

  public void test228() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Collection var3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.min(var3, var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.max(var3, var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var3);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.Comparator var10 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var9, var10);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test229() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test230() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.SortedSet var29 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var27);
    java2.util2.Iterator var30 = var27.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test231() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java2.util2.Iterator var28 = var27.iterator();
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)var30);
    java2.util2.Enumeration var32 = java2.util2.Collections.enumeration((java2.util2.Collection)var30);
    java2.util2.ArrayList var33 = java2.util2.Collections.list(var32);
    java2.util2.Collections.fill((java2.util2.List)var33, (java.lang.Object)(-1.0d));
    java2.util2.SortedSet var36 = var27.headSet((java.lang.Object)(-1.0d));
    int var37 = var27.size();
    java2.util2.Set var39 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var40 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var39);
    java2.util2.Enumeration var41 = java2.util2.Collections.enumeration((java2.util2.Collection)var39);
    java2.util2.ArrayList var42 = java2.util2.Collections.list(var41);
    java2.util2.Set var44 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var45 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var44);
    java2.util2.Collection var46 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var44);
    java2.util2.Comparator var47 = java2.util2.Collections.reverseOrder();
    java.lang.Object var48 = java2.util2.Collections.min(var46, var47);
    java2.util2.Comparator var49 = java2.util2.Collections.reverseOrder();
    java.lang.Object var50 = java2.util2.Collections.max(var46, var49);
    java2.util2.Collection var51 = java2.util2.Collections.unmodifiableCollection(var46);
    java2.util2.List var52 = java2.util2.Collections.singletonList((java.lang.Object)var46);
    java2.util2.List var53 = java2.util2.Collections.unmodifiableList(var52);
    java2.util2.Collections.copy((java2.util2.List)var42, var52);
    java.lang.Object[] var56 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var57 = var42.toArray(var56);
    java2.util2.List var58 = java2.util2.Collections.synchronizedList((java2.util2.List)var42);
    java2.util2.Set var60 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var61 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var60);
    boolean var62 = var42.containsAll(var61);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var63 = var27.tailSet((java.lang.Object)var61);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + 10L+ "'", var48.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + 10L+ "'", var50.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test232() throws Throwable {

    java2.util2.Map var2 = java2.util2.Collections.singletonMap((java.lang.Object)(byte)1, (java.lang.Object)'4');
    java2.util2.Map var3 = java2.util2.Collections.synchronizedMap(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test233() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var17 = var4.toArray();
    java2.util2.Collections.reverse((java2.util2.List)var4);
    java2.util2.Set var20 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var21 = java2.util2.Collections.singleton((java.lang.Object)var20);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var21);
    java2.util2.Set var24 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var24);
    java2.util2.Enumeration var26 = java2.util2.Collections.enumeration((java2.util2.Collection)var24);
    java2.util2.ArrayList var27 = java2.util2.Collections.list(var26);
    java2.util2.Set var29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var29);
    java2.util2.Collection var31 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var29);
    java2.util2.Comparator var32 = java2.util2.Collections.reverseOrder();
    java.lang.Object var33 = java2.util2.Collections.min(var31, var32);
    java2.util2.Comparator var34 = java2.util2.Collections.reverseOrder();
    java.lang.Object var35 = java2.util2.Collections.max(var31, var34);
    java2.util2.Collection var36 = java2.util2.Collections.unmodifiableCollection(var31);
    java2.util2.List var37 = java2.util2.Collections.singletonList((java.lang.Object)var31);
    java2.util2.List var38 = java2.util2.Collections.unmodifiableList(var37);
    java2.util2.Collections.copy((java2.util2.List)var27, var37);
    java.lang.Object[] var41 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var42 = var27.toArray(var41);
    boolean var45 = java2.util2.Collections.replaceAll((java2.util2.List)var27, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var46 = var27.toString();
    java2.util2.List var47 = java2.util2.Collections.unmodifiableList((java2.util2.List)var27);
    java.lang.String var48 = var27.toString();
    java2.util2.Collection var49 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var27);
    java2.util2.TreeSet var50 = new java2.util2.TreeSet(var49);
    java.lang.Object var51 = var50.clone();
    java2.util2.Set var53 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var54 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var53);
    java2.util2.Enumeration var55 = java2.util2.Collections.enumeration((java2.util2.Collection)var53);
    java2.util2.ArrayList var56 = java2.util2.Collections.list(var55);
    java2.util2.Set var58 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var59 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var58);
    java2.util2.Collection var60 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var58);
    java2.util2.Comparator var61 = java2.util2.Collections.reverseOrder();
    java.lang.Object var62 = java2.util2.Collections.min(var60, var61);
    java2.util2.Comparator var63 = java2.util2.Collections.reverseOrder();
    java.lang.Object var64 = java2.util2.Collections.max(var60, var63);
    java2.util2.Collection var65 = java2.util2.Collections.unmodifiableCollection(var60);
    java2.util2.List var66 = java2.util2.Collections.singletonList((java.lang.Object)var60);
    java2.util2.List var67 = java2.util2.Collections.unmodifiableList(var66);
    java2.util2.Collections.copy((java2.util2.List)var56, var66);
    java.lang.Object[] var69 = var56.toArray();
    java2.util2.List var70 = java2.util2.Collections.synchronizedList((java2.util2.List)var56);
    boolean var71 = var50.equals((java.lang.Object)var56);
    java2.util2.Comparator var72 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var73 = java2.util2.Collections.binarySearch((java2.util2.List)var4, (java.lang.Object)var71, var72);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + 10L+ "'", var33.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + 10L+ "'", var35.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "[[10]]"+ "'", var46.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[[10]]"+ "'", var48.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var50.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + 10L+ "'", var62.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + 10L+ "'", var64.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test234() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Iterator var29 = var27.iterator();
    java.lang.Object[] var30 = var27.toArray();
    boolean var31 = var27.isEmpty();
    int var32 = var27.size();
    java2.util2.Set var34 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var34);
    java2.util2.Enumeration var36 = java2.util2.Collections.enumeration((java2.util2.Collection)var34);
    java2.util2.ArrayList var37 = java2.util2.Collections.list(var36);
    java2.util2.Set var39 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var40 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var39);
    java2.util2.Collection var41 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var39);
    java2.util2.Comparator var42 = java2.util2.Collections.reverseOrder();
    java.lang.Object var43 = java2.util2.Collections.min(var41, var42);
    java2.util2.Comparator var44 = java2.util2.Collections.reverseOrder();
    java.lang.Object var45 = java2.util2.Collections.max(var41, var44);
    java2.util2.Collection var46 = java2.util2.Collections.unmodifiableCollection(var41);
    java2.util2.List var47 = java2.util2.Collections.singletonList((java.lang.Object)var41);
    java2.util2.List var48 = java2.util2.Collections.unmodifiableList(var47);
    java2.util2.Collections.copy((java2.util2.List)var37, var47);
    java.lang.Object[] var51 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var52 = var37.toArray(var51);
    boolean var55 = java2.util2.Collections.replaceAll((java2.util2.List)var37, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var56 = var37.toString();
    java2.util2.Set var58 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var59 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var58);
    java2.util2.Enumeration var60 = java2.util2.Collections.enumeration((java2.util2.Collection)var58);
    java2.util2.ArrayList var61 = java2.util2.Collections.list(var60);
    java2.util2.Set var63 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var64 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var63);
    java2.util2.Collection var65 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var63);
    java2.util2.Comparator var66 = java2.util2.Collections.reverseOrder();
    java.lang.Object var67 = java2.util2.Collections.min(var65, var66);
    java2.util2.Comparator var68 = java2.util2.Collections.reverseOrder();
    java.lang.Object var69 = java2.util2.Collections.max(var65, var68);
    java2.util2.Collection var70 = java2.util2.Collections.unmodifiableCollection(var65);
    java2.util2.List var71 = java2.util2.Collections.singletonList((java.lang.Object)var65);
    java2.util2.List var72 = java2.util2.Collections.unmodifiableList(var71);
    java2.util2.Collections.copy((java2.util2.List)var61, var71);
    java.lang.Object[] var74 = var61.toArray();
    java2.util2.List var75 = java2.util2.Collections.synchronizedList((java2.util2.List)var61);
    java2.util2.Collections.rotate((java2.util2.List)var61, 1);
    java2.util2.Collections.copy((java2.util2.List)var37, (java2.util2.List)var61);
    java2.util2.List var79 = java2.util2.Collections.synchronizedList((java2.util2.List)var37);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var80 = var27.add((java.lang.Object)var37);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + 10L+ "'", var43.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + 10L+ "'", var45.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "[[10]]"+ "'", var56.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + 10L+ "'", var67.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + 10L+ "'", var69.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test235() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java2.util2.Iterator var28 = var27.iterator();
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Enumeration var32 = java2.util2.Collections.enumeration((java2.util2.Collection)var30);
    java2.util2.ArrayList var33 = java2.util2.Collections.list(var32);
    java2.util2.Set var35 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var36 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var35);
    java2.util2.Collection var37 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var35);
    java2.util2.Comparator var38 = java2.util2.Collections.reverseOrder();
    java.lang.Object var39 = java2.util2.Collections.min(var37, var38);
    java2.util2.Comparator var40 = java2.util2.Collections.reverseOrder();
    java.lang.Object var41 = java2.util2.Collections.max(var37, var40);
    java2.util2.Collection var42 = java2.util2.Collections.unmodifiableCollection(var37);
    java2.util2.List var43 = java2.util2.Collections.singletonList((java.lang.Object)var37);
    java2.util2.List var44 = java2.util2.Collections.unmodifiableList(var43);
    java2.util2.Collections.copy((java2.util2.List)var33, var43);
    java2.util2.TreeSet var46 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var33, (java.lang.Object)var46);
    java2.util2.Set var49 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var50 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var49);
    java2.util2.Collection var51 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var49);
    java2.util2.Comparator var52 = java2.util2.Collections.reverseOrder();
    java.lang.Object var53 = java2.util2.Collections.min(var51, var52);
    java2.util2.Comparator var54 = java2.util2.Collections.reverseOrder();
    java.lang.Object var55 = java2.util2.Collections.max(var51, var54);
    java2.util2.Collection var56 = java2.util2.Collections.unmodifiableCollection(var51);
    java2.util2.List var57 = java2.util2.Collections.singletonList((java.lang.Object)var51);
    java2.util2.Collections.copy((java2.util2.List)var33, var57);
    java2.util2.List var59 = java2.util2.Collections.unmodifiableList((java2.util2.List)var33);
    java.lang.Object[] var61 = new java.lang.Object[] { 10.0f};
    java.lang.Object[] var62 = var33.toArray(var61);
    boolean var63 = var27.removeAll((java2.util2.Collection)var33);
    java2.util2.Set var65 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var66 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var65);
    java2.util2.Enumeration var67 = java2.util2.Collections.enumeration((java2.util2.Collection)var65);
    java2.util2.ArrayList var68 = java2.util2.Collections.list(var67);
    java2.util2.Set var70 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var71 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var70);
    java2.util2.Collection var72 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var70);
    java2.util2.Comparator var73 = java2.util2.Collections.reverseOrder();
    java.lang.Object var74 = java2.util2.Collections.min(var72, var73);
    java2.util2.Comparator var75 = java2.util2.Collections.reverseOrder();
    java.lang.Object var76 = java2.util2.Collections.max(var72, var75);
    java2.util2.Collection var77 = java2.util2.Collections.unmodifiableCollection(var72);
    java2.util2.List var78 = java2.util2.Collections.singletonList((java.lang.Object)var72);
    java2.util2.List var79 = java2.util2.Collections.unmodifiableList(var78);
    java2.util2.Collections.copy((java2.util2.List)var68, var78);
    java.lang.Object[] var82 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var83 = var68.toArray(var82);
    java2.util2.List var84 = java2.util2.Collections.synchronizedList((java2.util2.List)var68);
    java2.util2.List var85 = java2.util2.Collections.unmodifiableList((java2.util2.List)var68);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var86 = var27.addAll((java2.util2.Collection)var85);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + 10L+ "'", var39.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10L+ "'", var41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var46.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + 10L+ "'", var53.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + 10L+ "'", var55.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + 10L+ "'", var74.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + 10L+ "'", var76.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test236() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.SortedSet var29 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var27);
    java2.util2.Comparator var30 = var27.comparator();
    boolean var32 = var27.equals((java.lang.Object)(short)1);
    boolean var33 = var27.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test237() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    java2.util2.List var20 = java2.util2.Collections.synchronizedList((java2.util2.List)var4);
    java2.util2.Collection var21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.Set var23 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var23);
    java2.util2.Enumeration var25 = java2.util2.Collections.enumeration((java2.util2.Collection)var23);
    java2.util2.ArrayList var26 = java2.util2.Collections.list(var25);
    java2.util2.Set var28 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var29 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var28);
    java2.util2.Collection var30 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var28);
    java2.util2.Comparator var31 = java2.util2.Collections.reverseOrder();
    java.lang.Object var32 = java2.util2.Collections.min(var30, var31);
    java2.util2.Comparator var33 = java2.util2.Collections.reverseOrder();
    java.lang.Object var34 = java2.util2.Collections.max(var30, var33);
    java2.util2.Collection var35 = java2.util2.Collections.unmodifiableCollection(var30);
    java2.util2.List var36 = java2.util2.Collections.singletonList((java.lang.Object)var30);
    java2.util2.List var37 = java2.util2.Collections.unmodifiableList(var36);
    java2.util2.Collections.copy((java2.util2.List)var26, var36);
    java.lang.Object[] var40 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var41 = var26.toArray(var40);
    java2.util2.Comparator var42 = java2.util2.Collections.reverseOrder();
    java.lang.Object var43 = java2.util2.Collections.max((java2.util2.Collection)var26, var42);
    int var44 = java2.util2.Collections.lastIndexOfSubList((java2.util2.List)var4, (java2.util2.List)var26);
    java2.util2.Set var46 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var47 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var46);
    java2.util2.Enumeration var48 = java2.util2.Collections.enumeration((java2.util2.Collection)var46);
    java2.util2.ArrayList var49 = java2.util2.Collections.list(var48);
    java2.util2.Set var51 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var52 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var51);
    java2.util2.Collection var53 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var51);
    java2.util2.Comparator var54 = java2.util2.Collections.reverseOrder();
    java.lang.Object var55 = java2.util2.Collections.min(var53, var54);
    java2.util2.Comparator var56 = java2.util2.Collections.reverseOrder();
    java.lang.Object var57 = java2.util2.Collections.max(var53, var56);
    java2.util2.Collection var58 = java2.util2.Collections.unmodifiableCollection(var53);
    java2.util2.List var59 = java2.util2.Collections.singletonList((java.lang.Object)var53);
    java2.util2.List var60 = java2.util2.Collections.unmodifiableList(var59);
    java2.util2.Collections.copy((java2.util2.List)var49, var59);
    java.lang.Object[] var63 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var64 = var49.toArray(var63);
    boolean var67 = java2.util2.Collections.replaceAll((java2.util2.List)var49, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var68 = var49.toString();
    java2.util2.Collections.sort((java2.util2.List)var49);
    java2.util2.Collections.copy((java2.util2.List)var26, (java2.util2.List)var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + 10L+ "'", var32.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + 10L+ "'", var34.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + 10L+ "'", var55.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + 10L+ "'", var57.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "[[10]]"+ "'", var68.equals("[[10]]"));

  }

  public void test238() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    int var29 = var27.size();
    java2.util2.Set var30 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)var27);
    java2.util2.SortedSet var32 = var27.tailSet((java.lang.Object)'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test239() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var17 = var4.toArray();
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)var4);
    java2.util2.Set var20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var20);
    java2.util2.Enumeration var22 = java2.util2.Collections.enumeration((java2.util2.Collection)var20);
    java2.util2.ArrayList var23 = java2.util2.Collections.list(var22);
    java2.util2.Set var25 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var26 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var25);
    java2.util2.Collection var27 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var25);
    java2.util2.Comparator var28 = java2.util2.Collections.reverseOrder();
    java.lang.Object var29 = java2.util2.Collections.min(var27, var28);
    java2.util2.Comparator var30 = java2.util2.Collections.reverseOrder();
    java.lang.Object var31 = java2.util2.Collections.max(var27, var30);
    java2.util2.Collection var32 = java2.util2.Collections.unmodifiableCollection(var27);
    java2.util2.List var33 = java2.util2.Collections.singletonList((java.lang.Object)var27);
    java2.util2.List var34 = java2.util2.Collections.unmodifiableList(var33);
    java2.util2.Collections.copy((java2.util2.List)var23, var33);
    java.lang.Object[] var37 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var38 = var23.toArray(var37);
    java2.util2.List var39 = java2.util2.Collections.synchronizedList((java2.util2.List)var23);
    java2.util2.Collections.copy((java2.util2.List)var4, var39);
    java2.util2.Collections.reverse(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + 10L+ "'", var29.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + 10L+ "'", var31.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test240() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java2.util2.TreeSet var17 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var17);
    java2.util2.Enumeration var19 = java2.util2.Collections.enumeration((java2.util2.Collection)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var17.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test241() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    int var29 = var27.size();
    java.lang.Object var30 = var27.clone();
    java2.util2.SortedSet var31 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)var27);
    var27.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test242() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Enumeration var32 = java2.util2.Collections.enumeration((java2.util2.Collection)var30);
    java2.util2.ArrayList var33 = java2.util2.Collections.list(var32);
    java2.util2.Set var35 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var36 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var35);
    java2.util2.Collection var37 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var35);
    java2.util2.Comparator var38 = java2.util2.Collections.reverseOrder();
    java.lang.Object var39 = java2.util2.Collections.min(var37, var38);
    java2.util2.Comparator var40 = java2.util2.Collections.reverseOrder();
    java.lang.Object var41 = java2.util2.Collections.max(var37, var40);
    java2.util2.Collection var42 = java2.util2.Collections.unmodifiableCollection(var37);
    java2.util2.List var43 = java2.util2.Collections.singletonList((java.lang.Object)var37);
    java2.util2.List var44 = java2.util2.Collections.unmodifiableList(var43);
    java2.util2.Collections.copy((java2.util2.List)var33, var43);
    java.lang.Object[] var46 = var33.toArray();
    java2.util2.List var47 = java2.util2.Collections.synchronizedList((java2.util2.List)var33);
    boolean var48 = var27.equals((java.lang.Object)var33);
    java2.util2.Iterator var49 = var27.iterator();
    java2.util2.Map var51 = java2.util2.Collections.singletonMap((java.lang.Object)var27, (java.lang.Object)1.0d);
    java.lang.String var52 = var27.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + 10L+ "'", var39.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10L+ "'", var41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "[[10]]"+ "'", var52.equals("[[10]]"));

  }

  public void test243() throws Throwable {

    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Enumeration var4 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.Collection var9 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var7);
    java2.util2.Comparator var10 = java2.util2.Collections.reverseOrder();
    java.lang.Object var11 = java2.util2.Collections.min(var9, var10);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.max(var9, var12);
    java2.util2.Collection var14 = java2.util2.Collections.unmodifiableCollection(var9);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var5, var15);
    java2.util2.TreeSet var18 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var5, (java.lang.Object)var18);
    java2.util2.Set var21 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.Collection var23 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var21);
    java2.util2.Comparator var24 = java2.util2.Collections.reverseOrder();
    java.lang.Object var25 = java2.util2.Collections.min(var23, var24);
    java2.util2.Comparator var26 = java2.util2.Collections.reverseOrder();
    java.lang.Object var27 = java2.util2.Collections.max(var23, var26);
    java2.util2.Collection var28 = java2.util2.Collections.unmodifiableCollection(var23);
    java2.util2.List var29 = java2.util2.Collections.singletonList((java.lang.Object)var23);
    java2.util2.Collections.copy((java2.util2.List)var5, var29);
    java2.util2.Set var32 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var33 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var32);
    java2.util2.Enumeration var34 = java2.util2.Collections.enumeration((java2.util2.Collection)var32);
    java2.util2.ArrayList var35 = java2.util2.Collections.list(var34);
    java2.util2.Set var37 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var38 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var37);
    java2.util2.Collection var39 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var37);
    java2.util2.Comparator var40 = java2.util2.Collections.reverseOrder();
    java.lang.Object var41 = java2.util2.Collections.min(var39, var40);
    java2.util2.Comparator var42 = java2.util2.Collections.reverseOrder();
    java.lang.Object var43 = java2.util2.Collections.max(var39, var42);
    java2.util2.Collection var44 = java2.util2.Collections.unmodifiableCollection(var39);
    java2.util2.List var45 = java2.util2.Collections.singletonList((java.lang.Object)var39);
    java2.util2.List var46 = java2.util2.Collections.unmodifiableList(var45);
    java2.util2.Collections.copy((java2.util2.List)var35, var45);
    java.lang.Object[] var49 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var50 = var35.toArray(var49);
    boolean var53 = java2.util2.Collections.replaceAll((java2.util2.List)var35, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var54 = var35.toString();
    java2.util2.List var55 = java2.util2.Collections.unmodifiableList((java2.util2.List)var35);
    java.lang.String var56 = var35.toString();
    java2.util2.Collection var57 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var35);
    int var58 = java2.util2.Collections.lastIndexOfSubList(var29, (java2.util2.List)var35);
    java2.util2.List var59 = java2.util2.Collections.nCopies(10, (java.lang.Object)var35);
    java2.util2.Comparator var60 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var59, var60);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 10L+ "'", var11.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10L+ "'", var13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var18.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + 10L+ "'", var25.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + 10L+ "'", var27.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10L+ "'", var41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + 10L+ "'", var43.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "[[10]]"+ "'", var54.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "[[10]]"+ "'", var56.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test244() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)(-1.0d));
    java2.util2.Set var9 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    java2.util2.Enumeration var11 = java2.util2.Collections.enumeration((java2.util2.Collection)var9);
    java2.util2.ArrayList var12 = java2.util2.Collections.list(var11);
    java2.util2.Set var14 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var14);
    java2.util2.Collection var16 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var14);
    java2.util2.Comparator var17 = java2.util2.Collections.reverseOrder();
    java.lang.Object var18 = java2.util2.Collections.min(var16, var17);
    java2.util2.Comparator var19 = java2.util2.Collections.reverseOrder();
    java.lang.Object var20 = java2.util2.Collections.max(var16, var19);
    java2.util2.Collection var21 = java2.util2.Collections.unmodifiableCollection(var16);
    java2.util2.List var22 = java2.util2.Collections.singletonList((java.lang.Object)var16);
    java2.util2.List var23 = java2.util2.Collections.unmodifiableList(var22);
    java2.util2.Collections.copy((java2.util2.List)var12, var22);
    java.lang.Object[] var26 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var27 = var12.toArray(var26);
    java2.util2.List var28 = java2.util2.Collections.synchronizedList((java2.util2.List)var12);
    java2.util2.Collection var29 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.List var30 = java2.util2.Collections.nCopies(10, (java.lang.Object)var29);
    boolean var31 = var4.retainAll(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + 10L+ "'", var18.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + 10L+ "'", var20.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);

  }

  public void test245() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var17 = var4.toArray();
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.Set var24 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var24);
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var24);
    java2.util2.Comparator var27 = java2.util2.Collections.reverseOrder();
    java.lang.Object var28 = java2.util2.Collections.min(var26, var27);
    java2.util2.Comparator var29 = java2.util2.Collections.reverseOrder();
    java.lang.Object var30 = java2.util2.Collections.max(var26, var29);
    java2.util2.Collection var31 = java2.util2.Collections.unmodifiableCollection(var26);
    java2.util2.List var32 = java2.util2.Collections.singletonList((java.lang.Object)var26);
    java2.util2.List var33 = java2.util2.Collections.unmodifiableList(var32);
    java2.util2.Collections.copy((java2.util2.List)var22, var32);
    java.lang.Object[] var36 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var37 = var22.toArray(var36);
    boolean var40 = java2.util2.Collections.replaceAll((java2.util2.List)var22, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java2.util2.Collections.fill((java2.util2.List)var22, (java.lang.Object)(byte)(-1));
    java2.util2.Set var44 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var45 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var44);
    boolean var46 = var22.retainAll(var45);
    java2.util2.TreeSet var47 = new java2.util2.TreeSet(var45);
    boolean var48 = var4.containsAll(var45);
    java2.util2.Collections.sort((java2.util2.List)var4);
    java.lang.String var50 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + 10L+ "'", var28.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + 10L+ "'", var30.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var47.toString(),"[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "[[10]]"+ "'", var50.equals("[[10]]"));

  }

  public void test246() throws Throwable {

    java2.util2.List var2 = java2.util2.Collections.nCopies(100, (java.lang.Object)1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.Enumeration var6 = java2.util2.Collections.enumeration((java2.util2.Collection)var4);
    java2.util2.ArrayList var7 = java2.util2.Collections.list(var6);
    java2.util2.Set var9 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    java2.util2.Collection var11 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var9);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.min(var11, var12);
    java2.util2.Comparator var14 = java2.util2.Collections.reverseOrder();
    java.lang.Object var15 = java2.util2.Collections.max(var11, var14);
    java2.util2.Collection var16 = java2.util2.Collections.unmodifiableCollection(var11);
    java2.util2.List var17 = java2.util2.Collections.singletonList((java.lang.Object)var11);
    java2.util2.List var18 = java2.util2.Collections.unmodifiableList(var17);
    java2.util2.Collections.copy((java2.util2.List)var7, var17);
    java.lang.Object[] var20 = var7.toArray();
    java2.util2.List var21 = java2.util2.Collections.singletonList((java.lang.Object)var7);
    int var22 = java2.util2.Collections.lastIndexOfSubList(var2, (java2.util2.List)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10L+ "'", var13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + 10L+ "'", var15.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));

  }

  public void test247() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var17 = var4.toArray();
    java2.util2.Collections.reverse((java2.util2.List)var4);
    java2.util2.Set var20 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var21 = java2.util2.Collections.singleton((java.lang.Object)var20);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var24 = java2.util2.Collections.min((java2.util2.Collection)var23);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test248() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var17 = var4.toArray();
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)var4);
    java2.util2.Set var20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var20);
    java2.util2.Enumeration var22 = java2.util2.Collections.enumeration((java2.util2.Collection)var20);
    java2.util2.ArrayList var23 = java2.util2.Collections.list(var22);
    java2.util2.Set var25 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var26 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var25);
    java2.util2.Collection var27 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var25);
    java2.util2.Comparator var28 = java2.util2.Collections.reverseOrder();
    java.lang.Object var29 = java2.util2.Collections.min(var27, var28);
    java2.util2.Comparator var30 = java2.util2.Collections.reverseOrder();
    java.lang.Object var31 = java2.util2.Collections.max(var27, var30);
    java2.util2.Collection var32 = java2.util2.Collections.unmodifiableCollection(var27);
    java2.util2.List var33 = java2.util2.Collections.singletonList((java.lang.Object)var27);
    java2.util2.List var34 = java2.util2.Collections.unmodifiableList(var33);
    java2.util2.Collections.copy((java2.util2.List)var23, var33);
    java.lang.Object[] var37 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var38 = var23.toArray(var37);
    java2.util2.List var39 = java2.util2.Collections.synchronizedList((java2.util2.List)var23);
    java2.util2.Collections.copy((java2.util2.List)var4, var39);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(var39, 10, 100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + 10L+ "'", var29.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + 10L+ "'", var31.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test249() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test250() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Collections.sort((java2.util2.List)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test251() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Collection var3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    java2.util2.Collection var4 = java2.util2.Collections.unmodifiableCollection(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test252() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.Collections.sort((java2.util2.List)var4);
    java2.util2.Comparator var28 = java2.util2.Collections.reverseOrder();
    java.lang.Object var29 = java2.util2.Collections.min((java2.util2.Collection)var4, var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test253() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    java2.util2.List var20 = java2.util2.Collections.synchronizedList((java2.util2.List)var4);
    java2.util2.Set var22 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var23 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var22);
    boolean var24 = var4.containsAll(var23);
    java.lang.Object var25 = java2.util2.Collections.min(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + 10L+ "'", var25.equals(10L));

  }

  public void test254() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    int var29 = var27.size();
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.Enumeration var33 = java2.util2.Collections.enumeration((java2.util2.Collection)var31);
    java2.util2.ArrayList var34 = java2.util2.Collections.list(var33);
    java2.util2.Set var36 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var37 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var36);
    java2.util2.Collection var38 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var36);
    java2.util2.Comparator var39 = java2.util2.Collections.reverseOrder();
    java.lang.Object var40 = java2.util2.Collections.min(var38, var39);
    java2.util2.Comparator var41 = java2.util2.Collections.reverseOrder();
    java.lang.Object var42 = java2.util2.Collections.max(var38, var41);
    java2.util2.Collection var43 = java2.util2.Collections.unmodifiableCollection(var38);
    java2.util2.List var44 = java2.util2.Collections.singletonList((java.lang.Object)var38);
    java2.util2.List var45 = java2.util2.Collections.unmodifiableList(var44);
    java2.util2.Collections.copy((java2.util2.List)var34, var44);
    java.lang.Object[] var48 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var49 = var34.toArray(var48);
    boolean var52 = java2.util2.Collections.replaceAll((java2.util2.List)var34, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var53 = var34.toString();
    java2.util2.List var54 = java2.util2.Collections.unmodifiableList((java2.util2.List)var34);
    java.lang.String var55 = var34.toString();
    java2.util2.Collection var56 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var34);
    java2.util2.TreeSet var57 = new java2.util2.TreeSet(var56);
    java.lang.Object var58 = var57.clone();
    int var59 = var57.size();
    java.lang.Object var60 = var57.clone();
    java2.util2.SortedSet var61 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)var57);
    java2.util2.TreeSet var62 = new java2.util2.TreeSet();
    java2.util2.Iterator var63 = var62.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var64 = var27.subSet((java.lang.Object)var57, (java.lang.Object)var63);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + 10L+ "'", var40.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + 10L+ "'", var42.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "[[10]]"+ "'", var53.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "[[10]]"+ "'", var55.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var57.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var62.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test255() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    int var29 = var27.size();
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.Enumeration var33 = java2.util2.Collections.enumeration((java2.util2.Collection)var31);
    java2.util2.ArrayList var34 = java2.util2.Collections.list(var33);
    java2.util2.Set var36 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var37 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var36);
    java2.util2.Collection var38 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var36);
    java2.util2.Comparator var39 = java2.util2.Collections.reverseOrder();
    java.lang.Object var40 = java2.util2.Collections.min(var38, var39);
    java2.util2.Comparator var41 = java2.util2.Collections.reverseOrder();
    java.lang.Object var42 = java2.util2.Collections.max(var38, var41);
    java2.util2.Collection var43 = java2.util2.Collections.unmodifiableCollection(var38);
    java2.util2.List var44 = java2.util2.Collections.singletonList((java.lang.Object)var38);
    java2.util2.List var45 = java2.util2.Collections.unmodifiableList(var44);
    java2.util2.Collections.copy((java2.util2.List)var34, var44);
    java.lang.Object[] var48 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var49 = var34.toArray(var48);
    boolean var52 = java2.util2.Collections.replaceAll((java2.util2.List)var34, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var53 = var34.toString();
    java2.util2.List var54 = java2.util2.Collections.unmodifiableList((java2.util2.List)var34);
    java.lang.String var55 = var34.toString();
    java2.util2.Collection var56 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var34);
    java2.util2.TreeSet var57 = new java2.util2.TreeSet(var56);
    java.lang.Object var58 = var57.clone();
    java2.util2.Set var60 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var61 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var60);
    java2.util2.Enumeration var62 = java2.util2.Collections.enumeration((java2.util2.Collection)var60);
    java2.util2.ArrayList var63 = java2.util2.Collections.list(var62);
    java2.util2.Set var65 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var66 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var65);
    java2.util2.Collection var67 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var65);
    java2.util2.Comparator var68 = java2.util2.Collections.reverseOrder();
    java.lang.Object var69 = java2.util2.Collections.min(var67, var68);
    java2.util2.Comparator var70 = java2.util2.Collections.reverseOrder();
    java.lang.Object var71 = java2.util2.Collections.max(var67, var70);
    java2.util2.Collection var72 = java2.util2.Collections.unmodifiableCollection(var67);
    java2.util2.List var73 = java2.util2.Collections.singletonList((java.lang.Object)var67);
    java2.util2.List var74 = java2.util2.Collections.unmodifiableList(var73);
    java2.util2.Collections.copy((java2.util2.List)var63, var73);
    java.lang.Object[] var76 = var63.toArray();
    java2.util2.List var77 = java2.util2.Collections.synchronizedList((java2.util2.List)var63);
    boolean var78 = var57.equals((java.lang.Object)var63);
    java2.util2.Iterator var79 = var57.iterator();
    java2.util2.Map var81 = java2.util2.Collections.singletonMap((java.lang.Object)var57, (java.lang.Object)1.0d);
    java2.util2.SortedSet var82 = var27.headSet((java.lang.Object)1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + 10L+ "'", var40.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + 10L+ "'", var42.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "[[10]]"+ "'", var53.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "[[10]]"+ "'", var55.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var57.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + 10L+ "'", var69.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + 10L+ "'", var71.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test256() throws Throwable {

    java2.util2.List var2 = java2.util2.Collections.nCopies(10, (java.lang.Object)1.0f);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test257() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    int var29 = var27.size();
    java.lang.Object var30 = var27.clone();
    java2.util2.Set var31 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)var27);
    java.lang.Object var32 = var27.first();
    boolean var34 = var27.equals((java.lang.Object)(-1L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test258() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.Collections.sort((java2.util2.List)var4);
    java2.util2.List var25 = java2.util2.Collections.synchronizedList((java2.util2.List)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test259() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)(byte)(-1));
    java2.util2.Set var26 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var27 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var26);
    java2.util2.Enumeration var28 = java2.util2.Collections.enumeration((java2.util2.Collection)var26);
    java2.util2.ArrayList var29 = java2.util2.Collections.list(var28);
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.Collection var33 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var31);
    java2.util2.Comparator var34 = java2.util2.Collections.reverseOrder();
    java.lang.Object var35 = java2.util2.Collections.min(var33, var34);
    java2.util2.Comparator var36 = java2.util2.Collections.reverseOrder();
    java.lang.Object var37 = java2.util2.Collections.max(var33, var36);
    java2.util2.Collection var38 = java2.util2.Collections.unmodifiableCollection(var33);
    java2.util2.List var39 = java2.util2.Collections.singletonList((java.lang.Object)var33);
    java2.util2.List var40 = java2.util2.Collections.unmodifiableList(var39);
    java2.util2.Collections.copy((java2.util2.List)var29, var39);
    java.lang.Object[] var43 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var44 = var29.toArray(var43);
    boolean var47 = java2.util2.Collections.replaceAll((java2.util2.List)var29, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    boolean var48 = var4.retainAll((java2.util2.Collection)var29);
    java.lang.Object[] var49 = var4.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + 10L+ "'", var35.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + 10L+ "'", var37.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test260() throws Throwable {

    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Enumeration var4 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.Collection var9 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var7);
    java2.util2.Comparator var10 = java2.util2.Collections.reverseOrder();
    java.lang.Object var11 = java2.util2.Collections.min(var9, var10);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.max(var9, var12);
    java2.util2.Collection var14 = java2.util2.Collections.unmodifiableCollection(var9);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var5, var15);
    java.lang.Object[] var19 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var20 = var5.toArray(var19);
    boolean var23 = java2.util2.Collections.replaceAll((java2.util2.List)var5, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var24 = var5.toString();
    java2.util2.List var25 = java2.util2.Collections.unmodifiableList((java2.util2.List)var5);
    java.lang.String var26 = var5.toString();
    java2.util2.Collection var27 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var5);
    java2.util2.TreeSet var28 = new java2.util2.TreeSet(var27);
    java.lang.Object var29 = var28.clone();
    java2.util2.Iterator var30 = var28.iterator();
    java.lang.Object[] var31 = var28.toArray();
    boolean var32 = var28.isEmpty();
    java2.util2.List var33 = java2.util2.Collections.nCopies(100, (java.lang.Object)var32);
    java2.util2.Comparator var34 = java2.util2.Collections.reverseOrder();
    java.lang.Object var35 = java2.util2.Collections.max((java2.util2.Collection)var33, var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 10L+ "'", var11.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10L+ "'", var13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[[10]]"+ "'", var24.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[[10]]"+ "'", var26.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var28.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + false+ "'", var35.equals(false));

  }

  public void test261() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java2.util2.Set var29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var29);
    java2.util2.Enumeration var31 = java2.util2.Collections.enumeration((java2.util2.Collection)var29);
    java2.util2.ArrayList var32 = java2.util2.Collections.list(var31);
    java2.util2.Set var34 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var34);
    java2.util2.Collection var36 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var34);
    java2.util2.Comparator var37 = java2.util2.Collections.reverseOrder();
    java.lang.Object var38 = java2.util2.Collections.min(var36, var37);
    java2.util2.Comparator var39 = java2.util2.Collections.reverseOrder();
    java.lang.Object var40 = java2.util2.Collections.max(var36, var39);
    java2.util2.Collection var41 = java2.util2.Collections.unmodifiableCollection(var36);
    java2.util2.List var42 = java2.util2.Collections.singletonList((java.lang.Object)var36);
    java2.util2.List var43 = java2.util2.Collections.unmodifiableList(var42);
    java2.util2.Collections.copy((java2.util2.List)var32, var42);
    java.lang.Object[] var45 = var32.toArray();
    java2.util2.List var46 = java2.util2.Collections.synchronizedList((java2.util2.List)var32);
    java.lang.String var47 = var32.toString();
    boolean var48 = var27.equals((java.lang.Object)var47);
    java2.util2.Comparator var49 = var27.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + 10L+ "'", var38.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + 10L+ "'", var40.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "[[10]]"+ "'", var47.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);

  }

  public void test262() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java2.util2.Iterator var28 = var27.iterator();
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)var30);
    java2.util2.Enumeration var32 = java2.util2.Collections.enumeration((java2.util2.Collection)var30);
    java2.util2.ArrayList var33 = java2.util2.Collections.list(var32);
    java2.util2.Collections.fill((java2.util2.List)var33, (java.lang.Object)(-1.0d));
    java2.util2.SortedSet var36 = var27.headSet((java.lang.Object)(-1.0d));
    int var37 = var27.size();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var39 = var27.remove((java.lang.Object)(byte)(-1));
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);

  }

  public void test263() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java2.util2.Comparator var25 = java2.util2.Collections.reverseOrder();
    java.lang.Object var26 = java2.util2.Collections.max((java2.util2.Collection)var4, var25);
    java2.util2.Collections.rotate((java2.util2.List)var4, 0);
    java.lang.Object[] var29 = var4.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test264() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java2.util2.Set var24 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var24);
    java2.util2.Enumeration var26 = java2.util2.Collections.enumeration((java2.util2.Collection)var24);
    java2.util2.ArrayList var27 = java2.util2.Collections.list(var26);
    java2.util2.Set var29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var29);
    java2.util2.Collection var31 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var29);
    java2.util2.Comparator var32 = java2.util2.Collections.reverseOrder();
    java.lang.Object var33 = java2.util2.Collections.min(var31, var32);
    java2.util2.Comparator var34 = java2.util2.Collections.reverseOrder();
    java.lang.Object var35 = java2.util2.Collections.max(var31, var34);
    java2.util2.Collection var36 = java2.util2.Collections.unmodifiableCollection(var31);
    java2.util2.List var37 = java2.util2.Collections.singletonList((java.lang.Object)var31);
    java2.util2.List var38 = java2.util2.Collections.unmodifiableList(var37);
    java2.util2.Collections.copy((java2.util2.List)var27, var37);
    java.lang.Object[] var40 = var27.toArray();
    java2.util2.Collections.reverse((java2.util2.List)var27);
    java2.util2.Set var43 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var44 = java2.util2.Collections.singleton((java.lang.Object)var43);
    java2.util2.Collections.fill((java2.util2.List)var27, (java.lang.Object)var44);
    int var46 = java2.util2.Collections.indexOfSubList((java2.util2.List)var4, (java2.util2.List)var27);
    java2.util2.List var47 = java2.util2.Collections.synchronizedList((java2.util2.List)var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + 10L+ "'", var33.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + 10L+ "'", var35.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test265() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Iterator var29 = var27.iterator();
    boolean var30 = var27.isEmpty();
    java2.util2.Set var31 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var27);
    java2.util2.TreeSet var32 = new java2.util2.TreeSet((java2.util2.SortedSet)var27);
    java.lang.String var33 = var32.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var32.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[[10]]"+ "'", var33.equals("[[10]]"));

  }

  public void test266() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Iterator var29 = var27.iterator();
    java.lang.Object[] var30 = var27.toArray();
    boolean var31 = var27.isEmpty();
    int var32 = var27.size();
    java2.util2.Comparator var33 = var27.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test267() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    int var29 = var27.size();
    java2.util2.Set var30 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)var27);
    java.lang.String var31 = var27.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[[10]]"+ "'", var31.equals("[[10]]"));

  }

  public void test268() throws Throwable {

    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Enumeration var4 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.Collection var9 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var7);
    java2.util2.Comparator var10 = java2.util2.Collections.reverseOrder();
    java.lang.Object var11 = java2.util2.Collections.min(var9, var10);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.max(var9, var12);
    java2.util2.Collection var14 = java2.util2.Collections.unmodifiableCollection(var9);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var5, var15);
    java.lang.Object[] var19 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var20 = var5.toArray(var19);
    java2.util2.List var21 = java2.util2.Collections.synchronizedList((java2.util2.List)var5);
    java2.util2.List var22 = java2.util2.Collections.synchronizedList((java2.util2.List)var5);
    java2.util2.Map var23 = java2.util2.Collections.singletonMap((java.lang.Object)'a', (java.lang.Object)var22);
    java2.util2.Map var24 = java2.util2.Collections.synchronizedMap(var23);
    java2.util2.Map var25 = java2.util2.Collections.synchronizedMap(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 10L+ "'", var11.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10L+ "'", var13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test269() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.Set var28 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var29 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var28);
    java2.util2.Enumeration var30 = java2.util2.Collections.enumeration((java2.util2.Collection)var28);
    java2.util2.ArrayList var31 = java2.util2.Collections.list(var30);
    java2.util2.Set var33 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var34 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var33);
    java2.util2.Collection var35 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var33);
    java2.util2.Comparator var36 = java2.util2.Collections.reverseOrder();
    java.lang.Object var37 = java2.util2.Collections.min(var35, var36);
    java2.util2.Comparator var38 = java2.util2.Collections.reverseOrder();
    java.lang.Object var39 = java2.util2.Collections.max(var35, var38);
    java2.util2.Collection var40 = java2.util2.Collections.unmodifiableCollection(var35);
    java2.util2.List var41 = java2.util2.Collections.singletonList((java.lang.Object)var35);
    java2.util2.List var42 = java2.util2.Collections.unmodifiableList(var41);
    java2.util2.Collections.copy((java2.util2.List)var31, var41);
    java.lang.Object[] var45 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var46 = var31.toArray(var45);
    boolean var49 = java2.util2.Collections.replaceAll((java2.util2.List)var31, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java2.util2.Collections.fill((java2.util2.List)var31, (java.lang.Object)(byte)(-1));
    java2.util2.Comparator var52 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var53 = java2.util2.Collections.binarySearch((java2.util2.List)var4, (java.lang.Object)var31, var52);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + 10L+ "'", var37.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + 10L+ "'", var39.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test270() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Iterator var29 = var27.iterator();
    java2.util2.Set var30 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var27);
    java.lang.Object var31 = var27.clone();
    java2.util2.TreeSet var32 = new java2.util2.TreeSet((java2.util2.SortedSet)var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var32.toString(),"[[10]]");

  }

  public void test271() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Iterator var29 = var27.iterator();
    boolean var30 = var27.isEmpty();
    java2.util2.Set var31 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var27);
    java2.util2.TreeSet var32 = new java2.util2.TreeSet((java2.util2.SortedSet)var27);
    java2.util2.Iterator var33 = var27.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var32.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test272() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var3 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var4 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var3);
    java2.util2.Enumeration var5 = java2.util2.Collections.enumeration((java2.util2.Collection)var3);
    java2.util2.ArrayList var6 = java2.util2.Collections.list(var5);
    java2.util2.Set var8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var8);
    java2.util2.Collection var10 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var8);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.min(var10, var11);
    java2.util2.Comparator var13 = java2.util2.Collections.reverseOrder();
    java.lang.Object var14 = java2.util2.Collections.max(var10, var13);
    java2.util2.Collection var15 = java2.util2.Collections.unmodifiableCollection(var10);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var10);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Collections.copy((java2.util2.List)var6, var16);
    java.lang.Object[] var20 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var21 = var6.toArray(var20);
    boolean var24 = java2.util2.Collections.replaceAll((java2.util2.List)var6, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var25 = var6.toString();
    java2.util2.List var26 = java2.util2.Collections.unmodifiableList((java2.util2.List)var6);
    java2.util2.Comparator var27 = java2.util2.Collections.reverseOrder();
    java.lang.Object var28 = java2.util2.Collections.max((java2.util2.Collection)var6, var27);
    java2.util2.Collections.rotate((java2.util2.List)var6, 1);
    java2.util2.Map var31 = java2.util2.Collections.singletonMap((java.lang.Object)var1, (java.lang.Object)1);
    java2.util2.Map var32 = java2.util2.Collections.unmodifiableMap(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + 10L+ "'", var14.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test273() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    java2.util2.List var20 = java2.util2.Collections.synchronizedList((java2.util2.List)var4);
    java.lang.Object[] var21 = var4.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test274() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    int var29 = var27.size();
    java2.util2.Iterator var30 = var27.iterator();
    java.lang.Object var31 = var27.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test275() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java.lang.Object var3 = java2.util2.Collections.min((java2.util2.Collection)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + 1.0f+ "'", var3.equals(1.0f));

  }

  public void test276() throws Throwable {

    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)'4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test277() throws Throwable {

    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    boolean var4 = var0.removeAll(var3);
    java.lang.Object var5 = java2.util2.Collections.min(var3);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var8 = java2.util2.Collections.singleton((java.lang.Object)var7);
    java2.util2.Enumeration var9 = java2.util2.Collections.enumeration((java2.util2.Collection)var7);
    java2.util2.ArrayList var10 = java2.util2.Collections.list(var9);
    java2.util2.Map var11 = java2.util2.Collections.singletonMap(var5, (java.lang.Object)var9);
    java2.util2.Map var12 = java2.util2.Collections.unmodifiableMap(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test278() throws Throwable {

    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Enumeration var4 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.Collection var9 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var7);
    java2.util2.Comparator var10 = java2.util2.Collections.reverseOrder();
    java.lang.Object var11 = java2.util2.Collections.min(var9, var10);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.max(var9, var12);
    java2.util2.Collection var14 = java2.util2.Collections.unmodifiableCollection(var9);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var5, var15);
    java.lang.Object[] var19 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var20 = var5.toArray(var19);
    boolean var23 = java2.util2.Collections.replaceAll((java2.util2.List)var5, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var24 = var5.toString();
    java2.util2.List var25 = java2.util2.Collections.unmodifiableList((java2.util2.List)var5);
    java.lang.String var26 = var5.toString();
    java2.util2.Collection var27 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var5);
    java2.util2.TreeSet var28 = new java2.util2.TreeSet(var27);
    java.lang.Object var29 = var28.clone();
    java2.util2.Iterator var30 = var28.iterator();
    java.lang.Object[] var31 = var28.toArray();
    boolean var32 = var28.isEmpty();
    java2.util2.List var33 = java2.util2.Collections.nCopies(100, (java.lang.Object)var32);
    java2.util2.TreeSet var34 = new java2.util2.TreeSet();
    java2.util2.Set var36 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var37 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var36);
    boolean var38 = var34.removeAll(var37);
    java2.util2.Comparator var39 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var40 = java2.util2.Collections.binarySearch(var33, (java.lang.Object)var37, var39);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 10L+ "'", var11.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10L+ "'", var13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[[10]]"+ "'", var24.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[[10]]"+ "'", var26.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var28.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var34.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test279() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Enumeration var32 = java2.util2.Collections.enumeration((java2.util2.Collection)var30);
    java2.util2.ArrayList var33 = java2.util2.Collections.list(var32);
    java2.util2.Set var35 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var36 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var35);
    java2.util2.Collection var37 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var35);
    java2.util2.Comparator var38 = java2.util2.Collections.reverseOrder();
    java.lang.Object var39 = java2.util2.Collections.min(var37, var38);
    java2.util2.Comparator var40 = java2.util2.Collections.reverseOrder();
    java.lang.Object var41 = java2.util2.Collections.max(var37, var40);
    java2.util2.Collection var42 = java2.util2.Collections.unmodifiableCollection(var37);
    java2.util2.List var43 = java2.util2.Collections.singletonList((java.lang.Object)var37);
    java2.util2.List var44 = java2.util2.Collections.unmodifiableList(var43);
    java2.util2.Collections.copy((java2.util2.List)var33, var43);
    java.lang.Object[] var46 = var33.toArray();
    java2.util2.List var47 = java2.util2.Collections.synchronizedList((java2.util2.List)var33);
    boolean var48 = var27.equals((java.lang.Object)var33);
    java2.util2.Comparator var49 = var27.comparator();
    java2.util2.Comparator var50 = var27.comparator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var51 = java2.util2.Collections.min((java2.util2.Collection)var27);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + 10L+ "'", var39.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10L+ "'", var41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);

  }

  public void test280() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java.lang.Object var5 = java2.util2.Collections.max((java2.util2.Collection)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 1.0f+ "'", var5.equals(1.0f));

  }

  public void test281() throws Throwable {

    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Enumeration var4 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.Collection var9 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var7);
    java2.util2.Comparator var10 = java2.util2.Collections.reverseOrder();
    java.lang.Object var11 = java2.util2.Collections.min(var9, var10);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.max(var9, var12);
    java2.util2.Collection var14 = java2.util2.Collections.unmodifiableCollection(var9);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var5, var15);
    java2.util2.TreeSet var18 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var5, (java.lang.Object)var18);
    java2.util2.Set var21 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.Collection var23 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var21);
    java2.util2.Comparator var24 = java2.util2.Collections.reverseOrder();
    java.lang.Object var25 = java2.util2.Collections.min(var23, var24);
    java2.util2.Comparator var26 = java2.util2.Collections.reverseOrder();
    java.lang.Object var27 = java2.util2.Collections.max(var23, var26);
    java2.util2.Collection var28 = java2.util2.Collections.unmodifiableCollection(var23);
    java2.util2.List var29 = java2.util2.Collections.singletonList((java.lang.Object)var23);
    java2.util2.Collections.copy((java2.util2.List)var5, var29);
    java2.util2.Set var32 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var33 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var32);
    java2.util2.Enumeration var34 = java2.util2.Collections.enumeration((java2.util2.Collection)var32);
    java2.util2.ArrayList var35 = java2.util2.Collections.list(var34);
    java2.util2.Set var37 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var38 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var37);
    java2.util2.Collection var39 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var37);
    java2.util2.Comparator var40 = java2.util2.Collections.reverseOrder();
    java.lang.Object var41 = java2.util2.Collections.min(var39, var40);
    java2.util2.Comparator var42 = java2.util2.Collections.reverseOrder();
    java.lang.Object var43 = java2.util2.Collections.max(var39, var42);
    java2.util2.Collection var44 = java2.util2.Collections.unmodifiableCollection(var39);
    java2.util2.List var45 = java2.util2.Collections.singletonList((java.lang.Object)var39);
    java2.util2.List var46 = java2.util2.Collections.unmodifiableList(var45);
    java2.util2.Collections.copy((java2.util2.List)var35, var45);
    java.lang.Object[] var49 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var50 = var35.toArray(var49);
    boolean var53 = java2.util2.Collections.replaceAll((java2.util2.List)var35, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var54 = var35.toString();
    java2.util2.List var55 = java2.util2.Collections.unmodifiableList((java2.util2.List)var35);
    java.lang.String var56 = var35.toString();
    java2.util2.Collection var57 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var35);
    int var58 = java2.util2.Collections.lastIndexOfSubList(var29, (java2.util2.List)var35);
    java2.util2.List var59 = java2.util2.Collections.nCopies(10, (java.lang.Object)var35);
    java2.util2.Enumeration var60 = java2.util2.Collections.enumeration((java2.util2.Collection)var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 10L+ "'", var11.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10L+ "'", var13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var18.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + 10L+ "'", var25.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + 10L+ "'", var27.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10L+ "'", var41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + 10L+ "'", var43.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "[[10]]"+ "'", var54.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "[[10]]"+ "'", var56.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test282() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java2.util2.Set var24 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var24);
    java2.util2.Enumeration var26 = java2.util2.Collections.enumeration((java2.util2.Collection)var24);
    java2.util2.ArrayList var27 = java2.util2.Collections.list(var26);
    java2.util2.Set var29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var29);
    java2.util2.Collection var31 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var29);
    java2.util2.Comparator var32 = java2.util2.Collections.reverseOrder();
    java.lang.Object var33 = java2.util2.Collections.min(var31, var32);
    java2.util2.Comparator var34 = java2.util2.Collections.reverseOrder();
    java.lang.Object var35 = java2.util2.Collections.max(var31, var34);
    java2.util2.Collection var36 = java2.util2.Collections.unmodifiableCollection(var31);
    java2.util2.List var37 = java2.util2.Collections.singletonList((java.lang.Object)var31);
    java2.util2.List var38 = java2.util2.Collections.unmodifiableList(var37);
    java2.util2.Collections.copy((java2.util2.List)var27, var37);
    java.lang.Object[] var41 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var42 = var27.toArray(var41);
    java2.util2.List var43 = java2.util2.Collections.synchronizedList((java2.util2.List)var27);
    java2.util2.Collection var44 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var27);
    java2.util2.Set var46 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var47 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var46);
    java2.util2.Enumeration var48 = java2.util2.Collections.enumeration((java2.util2.Collection)var46);
    java2.util2.ArrayList var49 = java2.util2.Collections.list(var48);
    java2.util2.Set var51 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var52 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var51);
    java2.util2.Collection var53 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var51);
    java2.util2.Comparator var54 = java2.util2.Collections.reverseOrder();
    java.lang.Object var55 = java2.util2.Collections.min(var53, var54);
    java2.util2.Comparator var56 = java2.util2.Collections.reverseOrder();
    java.lang.Object var57 = java2.util2.Collections.max(var53, var56);
    java2.util2.Collection var58 = java2.util2.Collections.unmodifiableCollection(var53);
    java2.util2.List var59 = java2.util2.Collections.singletonList((java.lang.Object)var53);
    java2.util2.List var60 = java2.util2.Collections.unmodifiableList(var59);
    java2.util2.Collections.copy((java2.util2.List)var49, var59);
    java.lang.Object[] var63 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var64 = var49.toArray(var63);
    java2.util2.Comparator var65 = java2.util2.Collections.reverseOrder();
    java.lang.Object var66 = java2.util2.Collections.max((java2.util2.Collection)var49, var65);
    int var67 = java2.util2.Collections.lastIndexOfSubList((java2.util2.List)var27, (java2.util2.List)var49);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + 10L+ "'", var33.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + 10L+ "'", var35.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + 10L+ "'", var55.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + 10L+ "'", var57.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == (-1));

  }

  public void test283() throws Throwable {

    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Enumeration var4 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.Collection var9 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var7);
    java2.util2.Comparator var10 = java2.util2.Collections.reverseOrder();
    java.lang.Object var11 = java2.util2.Collections.min(var9, var10);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.max(var9, var12);
    java2.util2.Collection var14 = java2.util2.Collections.unmodifiableCollection(var9);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var5, var15);
    java.lang.Object[] var19 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var20 = var5.toArray(var19);
    boolean var23 = java2.util2.Collections.replaceAll((java2.util2.List)var5, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var24 = var5.toString();
    java2.util2.List var25 = java2.util2.Collections.unmodifiableList((java2.util2.List)var5);
    java.lang.String var26 = var5.toString();
    java2.util2.Collection var27 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var5);
    java2.util2.TreeSet var28 = new java2.util2.TreeSet(var27);
    java.lang.Object var29 = var28.clone();
    java2.util2.Iterator var30 = var28.iterator();
    java.lang.Object[] var31 = var28.toArray();
    boolean var32 = var28.isEmpty();
    java2.util2.List var33 = java2.util2.Collections.nCopies(100, (java.lang.Object)var32);
    java2.util2.List var34 = java2.util2.Collections.synchronizedList(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 10L+ "'", var11.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10L+ "'", var13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[[10]]"+ "'", var24.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[[10]]"+ "'", var26.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var28.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test284() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var17 = var4.toArray();
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)var4);
    java2.util2.Set var20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var20);
    java2.util2.Enumeration var22 = java2.util2.Collections.enumeration((java2.util2.Collection)var20);
    java2.util2.ArrayList var23 = java2.util2.Collections.list(var22);
    java2.util2.Set var25 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var26 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var25);
    java2.util2.Collection var27 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var25);
    java2.util2.Comparator var28 = java2.util2.Collections.reverseOrder();
    java.lang.Object var29 = java2.util2.Collections.min(var27, var28);
    java2.util2.Comparator var30 = java2.util2.Collections.reverseOrder();
    java.lang.Object var31 = java2.util2.Collections.max(var27, var30);
    java2.util2.Collection var32 = java2.util2.Collections.unmodifiableCollection(var27);
    java2.util2.List var33 = java2.util2.Collections.singletonList((java.lang.Object)var27);
    java2.util2.List var34 = java2.util2.Collections.unmodifiableList(var33);
    java2.util2.Collections.copy((java2.util2.List)var23, var33);
    java.lang.Object[] var37 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var38 = var23.toArray(var37);
    java2.util2.List var39 = java2.util2.Collections.synchronizedList((java2.util2.List)var23);
    java2.util2.List var40 = java2.util2.Collections.synchronizedList((java2.util2.List)var23);
    java.lang.Object[] var41 = var23.toArray();
    java2.util2.Set var43 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var44 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var43);
    java2.util2.Enumeration var45 = java2.util2.Collections.enumeration((java2.util2.Collection)var43);
    java2.util2.ArrayList var46 = java2.util2.Collections.list(var45);
    java2.util2.Set var48 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var49 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var48);
    java2.util2.Collection var50 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var48);
    java2.util2.Comparator var51 = java2.util2.Collections.reverseOrder();
    java.lang.Object var52 = java2.util2.Collections.min(var50, var51);
    java2.util2.Comparator var53 = java2.util2.Collections.reverseOrder();
    java.lang.Object var54 = java2.util2.Collections.max(var50, var53);
    java2.util2.Collection var55 = java2.util2.Collections.unmodifiableCollection(var50);
    java2.util2.List var56 = java2.util2.Collections.singletonList((java.lang.Object)var50);
    java2.util2.List var57 = java2.util2.Collections.unmodifiableList(var56);
    java2.util2.Collections.copy((java2.util2.List)var46, var56);
    java.lang.Object[] var60 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var61 = var46.toArray(var60);
    java2.util2.List var62 = java2.util2.Collections.synchronizedList((java2.util2.List)var46);
    java2.util2.List var63 = java2.util2.Collections.synchronizedList((java2.util2.List)var46);
    java.lang.Object[] var64 = var46.toArray();
    java2.util2.Collection var65 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var46);
    boolean var66 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)var41, (java.lang.Object)var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + 10L+ "'", var29.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + 10L+ "'", var31.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + 10L+ "'", var52.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + 10L+ "'", var54.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test285() throws Throwable {

    java2.util2.List var2 = java2.util2.Collections.nCopies(1, (java.lang.Object)1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test286() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Enumeration var32 = java2.util2.Collections.enumeration((java2.util2.Collection)var30);
    java2.util2.ArrayList var33 = java2.util2.Collections.list(var32);
    java2.util2.Set var35 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var36 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var35);
    java2.util2.Collection var37 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var35);
    java2.util2.Comparator var38 = java2.util2.Collections.reverseOrder();
    java.lang.Object var39 = java2.util2.Collections.min(var37, var38);
    java2.util2.Comparator var40 = java2.util2.Collections.reverseOrder();
    java.lang.Object var41 = java2.util2.Collections.max(var37, var40);
    java2.util2.Collection var42 = java2.util2.Collections.unmodifiableCollection(var37);
    java2.util2.List var43 = java2.util2.Collections.singletonList((java.lang.Object)var37);
    java2.util2.List var44 = java2.util2.Collections.unmodifiableList(var43);
    java2.util2.Collections.copy((java2.util2.List)var33, var43);
    java.lang.Object[] var46 = var33.toArray();
    java2.util2.List var47 = java2.util2.Collections.synchronizedList((java2.util2.List)var33);
    boolean var48 = var27.equals((java.lang.Object)var33);
    java2.util2.Iterator var49 = var27.iterator();
    java2.util2.Map var51 = java2.util2.Collections.singletonMap((java.lang.Object)var27, (java.lang.Object)1.0d);
    java.lang.Object var52 = var27.last();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var53 = java2.util2.Collections.min((java2.util2.Collection)var27);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + 10L+ "'", var39.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10L+ "'", var41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test287() throws Throwable {

    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.max(var3, var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.max(var3, var6);
    java2.util2.Map var8 = java2.util2.Collections.singletonMap((java.lang.Object)0.0d, (java.lang.Object)var3);
    java2.util2.Map var9 = java2.util2.Collections.unmodifiableMap(var8);
    java2.util2.Map var10 = java2.util2.Collections.synchronizedMap(var8);
    java2.util2.Map var11 = java2.util2.Collections.unmodifiableMap(var8);
    java2.util2.Map var12 = java2.util2.Collections.synchronizedMap(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test288() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    int var29 = var27.size();
    java2.util2.Iterator var30 = var27.iterator();
    java2.util2.Collection var31 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var27);
    java2.util2.Set var32 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)var27);
    boolean var33 = var27.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test289() throws Throwable {

    java2.util2.TreeSet var1 = new java2.util2.TreeSet();
    boolean var3 = var1.add((java.lang.Object)1);
    java2.util2.Map var4 = java2.util2.Collections.singletonMap((java.lang.Object)100L, (java.lang.Object)var3);
    java2.util2.Map var5 = java2.util2.Collections.unmodifiableMap(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var1.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test290() throws Throwable {

    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Enumeration var4 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.Collection var9 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var7);
    java2.util2.Comparator var10 = java2.util2.Collections.reverseOrder();
    java.lang.Object var11 = java2.util2.Collections.min(var9, var10);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.max(var9, var12);
    java2.util2.Collection var14 = java2.util2.Collections.unmodifiableCollection(var9);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var5, var15);
    java.lang.Object[] var19 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var20 = var5.toArray(var19);
    java2.util2.List var21 = java2.util2.Collections.synchronizedList((java2.util2.List)var5);
    java2.util2.List var22 = java2.util2.Collections.synchronizedList((java2.util2.List)var5);
    java2.util2.Map var23 = java2.util2.Collections.singletonMap((java.lang.Object)'a', (java.lang.Object)var22);
    java2.util2.Map var24 = java2.util2.Collections.unmodifiableMap(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 10L+ "'", var11.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10L+ "'", var13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test291() throws Throwable {

    java2.util2.List var2 = java2.util2.Collections.nCopies(10, (java.lang.Object)1.0f);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet();
    java2.util2.Set var5 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    java2.util2.Comparator var7 = java2.util2.Collections.reverseOrder();
    java.lang.Object var8 = java2.util2.Collections.max(var6, var7);
    boolean var9 = var3.containsAll(var6);
    java2.util2.Comparator var10 = java2.util2.Collections.reverseOrder();
    java.lang.Object var11 = java2.util2.Collections.min(var6, var10);
    java2.util2.Set var14 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var14);
    java2.util2.Enumeration var16 = java2.util2.Collections.enumeration((java2.util2.Collection)var14);
    java2.util2.ArrayList var17 = java2.util2.Collections.list(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Collection var21 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var19);
    java2.util2.Comparator var22 = java2.util2.Collections.reverseOrder();
    java.lang.Object var23 = java2.util2.Collections.min(var21, var22);
    java2.util2.Comparator var24 = java2.util2.Collections.reverseOrder();
    java.lang.Object var25 = java2.util2.Collections.max(var21, var24);
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection(var21);
    java2.util2.List var27 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var28 = java2.util2.Collections.unmodifiableList(var27);
    java2.util2.Collections.copy((java2.util2.List)var17, var27);
    java.lang.Object[] var31 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var32 = var17.toArray(var31);
    java2.util2.List var33 = java2.util2.Collections.synchronizedList((java2.util2.List)var17);
    java2.util2.Collection var34 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var17);
    java2.util2.List var35 = java2.util2.Collections.nCopies(10, (java.lang.Object)var34);
    boolean var36 = java2.util2.Collections.replaceAll(var2, var11, (java.lang.Object)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + 10L+ "'", var8.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 10L+ "'", var11.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + 10L+ "'", var23.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + 10L+ "'", var25.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test292() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java2.util2.Iterator var28 = var27.iterator();
    java2.util2.TreeSet var29 = new java2.util2.TreeSet((java2.util2.SortedSet)var27);
    java.lang.Object var30 = var27.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var29.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test293() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.SortedSet var29 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var27);
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.Enumeration var33 = java2.util2.Collections.enumeration((java2.util2.Collection)var31);
    java2.util2.ArrayList var34 = java2.util2.Collections.list(var33);
    java2.util2.Set var36 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var37 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var36);
    java2.util2.Collection var38 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var36);
    java2.util2.Comparator var39 = java2.util2.Collections.reverseOrder();
    java.lang.Object var40 = java2.util2.Collections.min(var38, var39);
    java2.util2.Comparator var41 = java2.util2.Collections.reverseOrder();
    java.lang.Object var42 = java2.util2.Collections.max(var38, var41);
    java2.util2.Collection var43 = java2.util2.Collections.unmodifiableCollection(var38);
    java2.util2.List var44 = java2.util2.Collections.singletonList((java.lang.Object)var38);
    java2.util2.List var45 = java2.util2.Collections.unmodifiableList(var44);
    java2.util2.Collections.copy((java2.util2.List)var34, var44);
    java.lang.Object[] var47 = var34.toArray();
    java2.util2.List var48 = java2.util2.Collections.singletonList((java.lang.Object)var34);
    java2.util2.Set var50 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var51 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var50);
    java2.util2.Enumeration var52 = java2.util2.Collections.enumeration((java2.util2.Collection)var50);
    java2.util2.ArrayList var53 = java2.util2.Collections.list(var52);
    java2.util2.Set var55 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var56 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var55);
    java2.util2.Collection var57 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var55);
    java2.util2.Comparator var58 = java2.util2.Collections.reverseOrder();
    java.lang.Object var59 = java2.util2.Collections.min(var57, var58);
    java2.util2.Comparator var60 = java2.util2.Collections.reverseOrder();
    java.lang.Object var61 = java2.util2.Collections.max(var57, var60);
    java2.util2.Collection var62 = java2.util2.Collections.unmodifiableCollection(var57);
    java2.util2.List var63 = java2.util2.Collections.singletonList((java.lang.Object)var57);
    java2.util2.List var64 = java2.util2.Collections.unmodifiableList(var63);
    java2.util2.Collections.copy((java2.util2.List)var53, var63);
    java.lang.Object[] var67 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var68 = var53.toArray(var67);
    java2.util2.List var69 = java2.util2.Collections.synchronizedList((java2.util2.List)var53);
    java2.util2.Collections.copy((java2.util2.List)var34, var69);
    java2.util2.Map var71 = java2.util2.Collections.singletonMap((java.lang.Object)var27, (java.lang.Object)var34);
    java2.util2.Set var73 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var74 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var73);
    java2.util2.Collection var75 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var73);
    java2.util2.Comparator var76 = java2.util2.Collections.reverseOrder();
    java.lang.Object var77 = java2.util2.Collections.min(var75, var76);
    java2.util2.Comparator var78 = java2.util2.Collections.reverseOrder();
    java.lang.Object var79 = java2.util2.Collections.max(var75, var78);
    java2.util2.Collection var80 = java2.util2.Collections.unmodifiableCollection(var75);
    java2.util2.List var81 = java2.util2.Collections.singletonList((java.lang.Object)var75);
    java2.util2.Collections.shuffle(var81);
    java2.util2.Collections.fill((java2.util2.List)var34, (java.lang.Object)var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + 10L+ "'", var40.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + 10L+ "'", var42.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + 10L+ "'", var59.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + 10L+ "'", var61.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + 10L+ "'", var77.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + 10L+ "'", var79.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test294() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var27 = java2.util2.Collections.min((java2.util2.Collection)var4);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test295() throws Throwable {

    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Enumeration var4 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.Collection var9 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var7);
    java2.util2.Comparator var10 = java2.util2.Collections.reverseOrder();
    java.lang.Object var11 = java2.util2.Collections.min(var9, var10);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.max(var9, var12);
    java2.util2.Collection var14 = java2.util2.Collections.unmodifiableCollection(var9);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var5, var15);
    java2.util2.TreeSet var18 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var5, (java.lang.Object)var18);
    java2.util2.Set var21 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.Collection var23 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var21);
    java2.util2.Comparator var24 = java2.util2.Collections.reverseOrder();
    java.lang.Object var25 = java2.util2.Collections.min(var23, var24);
    java2.util2.Comparator var26 = java2.util2.Collections.reverseOrder();
    java.lang.Object var27 = java2.util2.Collections.max(var23, var26);
    java2.util2.Collection var28 = java2.util2.Collections.unmodifiableCollection(var23);
    java2.util2.List var29 = java2.util2.Collections.singletonList((java.lang.Object)var23);
    java2.util2.Collections.copy((java2.util2.List)var5, var29);
    java2.util2.Set var32 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var33 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var32);
    java2.util2.Enumeration var34 = java2.util2.Collections.enumeration((java2.util2.Collection)var32);
    java2.util2.ArrayList var35 = java2.util2.Collections.list(var34);
    java2.util2.Set var37 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var38 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var37);
    java2.util2.Collection var39 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var37);
    java2.util2.Comparator var40 = java2.util2.Collections.reverseOrder();
    java.lang.Object var41 = java2.util2.Collections.min(var39, var40);
    java2.util2.Comparator var42 = java2.util2.Collections.reverseOrder();
    java.lang.Object var43 = java2.util2.Collections.max(var39, var42);
    java2.util2.Collection var44 = java2.util2.Collections.unmodifiableCollection(var39);
    java2.util2.List var45 = java2.util2.Collections.singletonList((java.lang.Object)var39);
    java2.util2.List var46 = java2.util2.Collections.unmodifiableList(var45);
    java2.util2.Collections.copy((java2.util2.List)var35, var45);
    java.lang.Object[] var49 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var50 = var35.toArray(var49);
    boolean var53 = java2.util2.Collections.replaceAll((java2.util2.List)var35, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var54 = var35.toString();
    java2.util2.List var55 = java2.util2.Collections.unmodifiableList((java2.util2.List)var35);
    java.lang.String var56 = var35.toString();
    java2.util2.Collection var57 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var35);
    int var58 = java2.util2.Collections.lastIndexOfSubList(var29, (java2.util2.List)var35);
    java2.util2.List var59 = java2.util2.Collections.nCopies(10, (java.lang.Object)var35);
    java2.util2.Collections.sort((java2.util2.List)var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 10L+ "'", var11.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10L+ "'", var13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var18.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + 10L+ "'", var25.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + 10L+ "'", var27.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10L+ "'", var41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + 10L+ "'", var43.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "[[10]]"+ "'", var54.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "[[10]]"+ "'", var56.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test296() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Iterator var29 = var27.iterator();
    java2.util2.Set var30 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var27);
    java.lang.Object var31 = var27.clone();
    java2.util2.Comparator var32 = java2.util2.Collections.reverseOrder();
    java.lang.Object var33 = java2.util2.Collections.min((java2.util2.Collection)var27, var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test297() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java2.util2.Comparator var25 = java2.util2.Collections.reverseOrder();
    java.lang.Object var26 = java2.util2.Collections.max((java2.util2.Collection)var4, var25);
    java2.util2.Collections.rotate((java2.util2.List)var4, 0);
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Enumeration var32 = java2.util2.Collections.enumeration((java2.util2.Collection)var30);
    java2.util2.ArrayList var33 = java2.util2.Collections.list(var32);
    java2.util2.Set var35 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var36 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var35);
    java2.util2.Collection var37 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var35);
    java2.util2.Comparator var38 = java2.util2.Collections.reverseOrder();
    java.lang.Object var39 = java2.util2.Collections.min(var37, var38);
    java2.util2.Comparator var40 = java2.util2.Collections.reverseOrder();
    java.lang.Object var41 = java2.util2.Collections.max(var37, var40);
    java2.util2.Collection var42 = java2.util2.Collections.unmodifiableCollection(var37);
    java2.util2.List var43 = java2.util2.Collections.singletonList((java.lang.Object)var37);
    java2.util2.List var44 = java2.util2.Collections.unmodifiableList(var43);
    java2.util2.Collections.copy((java2.util2.List)var33, var43);
    java.lang.Object[] var47 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var48 = var33.toArray(var47);
    java2.util2.Comparator var49 = java2.util2.Collections.reverseOrder();
    java.lang.Object var50 = java2.util2.Collections.max((java2.util2.Collection)var33, var49);
    int var51 = java2.util2.Collections.indexOfSubList((java2.util2.List)var4, (java2.util2.List)var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + 10L+ "'", var39.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10L+ "'", var41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));

  }

  public void test298() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Enumeration var32 = java2.util2.Collections.enumeration((java2.util2.Collection)var30);
    java2.util2.ArrayList var33 = java2.util2.Collections.list(var32);
    java2.util2.Set var35 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var36 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var35);
    java2.util2.Collection var37 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var35);
    java2.util2.Comparator var38 = java2.util2.Collections.reverseOrder();
    java.lang.Object var39 = java2.util2.Collections.min(var37, var38);
    java2.util2.Comparator var40 = java2.util2.Collections.reverseOrder();
    java.lang.Object var41 = java2.util2.Collections.max(var37, var40);
    java2.util2.Collection var42 = java2.util2.Collections.unmodifiableCollection(var37);
    java2.util2.List var43 = java2.util2.Collections.singletonList((java.lang.Object)var37);
    java2.util2.List var44 = java2.util2.Collections.unmodifiableList(var43);
    java2.util2.Collections.copy((java2.util2.List)var33, var43);
    java.lang.Object[] var46 = var33.toArray();
    java2.util2.List var47 = java2.util2.Collections.synchronizedList((java2.util2.List)var33);
    boolean var48 = var27.equals((java.lang.Object)var33);
    java2.util2.Iterator var49 = var27.iterator();
    java2.util2.Map var51 = java2.util2.Collections.singletonMap((java.lang.Object)var27, (java.lang.Object)1.0d);
    java.lang.Object var52 = var27.last();
    java2.util2.Set var53 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var27);
    java2.util2.SortedSet var55 = var27.headSet((java.lang.Object)10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + 10L+ "'", var39.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10L+ "'", var41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test299() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java2.util2.Iterator var28 = var27.iterator();
    java2.util2.TreeSet var29 = new java2.util2.TreeSet((java2.util2.SortedSet)var27);
    java2.util2.Comparator var30 = java2.util2.Collections.reverseOrder();
    java.lang.Object var31 = java2.util2.Collections.min((java2.util2.Collection)var27, var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var29.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test300() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test301() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Enumeration var32 = java2.util2.Collections.enumeration((java2.util2.Collection)var30);
    java2.util2.ArrayList var33 = java2.util2.Collections.list(var32);
    java2.util2.Set var35 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var36 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var35);
    java2.util2.Collection var37 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var35);
    java2.util2.Comparator var38 = java2.util2.Collections.reverseOrder();
    java.lang.Object var39 = java2.util2.Collections.min(var37, var38);
    java2.util2.Comparator var40 = java2.util2.Collections.reverseOrder();
    java.lang.Object var41 = java2.util2.Collections.max(var37, var40);
    java2.util2.Collection var42 = java2.util2.Collections.unmodifiableCollection(var37);
    java2.util2.List var43 = java2.util2.Collections.singletonList((java.lang.Object)var37);
    java2.util2.List var44 = java2.util2.Collections.unmodifiableList(var43);
    java2.util2.Collections.copy((java2.util2.List)var33, var43);
    java.lang.Object[] var46 = var33.toArray();
    java2.util2.List var47 = java2.util2.Collections.synchronizedList((java2.util2.List)var33);
    boolean var48 = var27.equals((java.lang.Object)var33);
    java2.util2.Comparator var49 = var27.comparator();
    java2.util2.Set var50 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + 10L+ "'", var39.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10L+ "'", var41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test302() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.first();
    var27.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test303() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    int var29 = var27.size();
    java.lang.Object var30 = var27.clone();
    java2.util2.Set var31 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)var27);
    java.lang.Object var32 = var27.first();
    int var33 = var27.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);

  }

  public void test304() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Collection var3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.min(var3, var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.max(var3, var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var3);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.Collections.shuffle(var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.min((java2.util2.Collection)var9, var11);
    java2.util2.List var13 = java2.util2.Collections.synchronizedList(var9);
    java2.util2.Comparator var14 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var13, var14);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test305() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Enumeration var32 = java2.util2.Collections.enumeration((java2.util2.Collection)var30);
    java2.util2.ArrayList var33 = java2.util2.Collections.list(var32);
    java2.util2.Set var35 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var36 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var35);
    java2.util2.Collection var37 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var35);
    java2.util2.Comparator var38 = java2.util2.Collections.reverseOrder();
    java.lang.Object var39 = java2.util2.Collections.min(var37, var38);
    java2.util2.Comparator var40 = java2.util2.Collections.reverseOrder();
    java.lang.Object var41 = java2.util2.Collections.max(var37, var40);
    java2.util2.Collection var42 = java2.util2.Collections.unmodifiableCollection(var37);
    java2.util2.List var43 = java2.util2.Collections.singletonList((java.lang.Object)var37);
    java2.util2.List var44 = java2.util2.Collections.unmodifiableList(var43);
    java2.util2.Collections.copy((java2.util2.List)var33, var43);
    java.lang.Object[] var46 = var33.toArray();
    java2.util2.List var47 = java2.util2.Collections.synchronizedList((java2.util2.List)var33);
    boolean var48 = var27.equals((java.lang.Object)var33);
    java2.util2.Comparator var49 = var27.comparator();
    java.lang.Object var50 = var27.last();
    java2.util2.Set var52 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    boolean var53 = var27.equals((java.lang.Object)1.0f);
    java2.util2.Set var54 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + 10L+ "'", var39.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10L+ "'", var41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test306() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Iterator var29 = var27.iterator();
    boolean var30 = var27.isEmpty();
    java2.util2.Set var31 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var27);
    java2.util2.TreeSet var32 = new java2.util2.TreeSet((java2.util2.SortedSet)var27);
    java2.util2.TreeSet var33 = new java2.util2.TreeSet();
    boolean var35 = var33.add((java.lang.Object)1);
    java2.util2.Set var37 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var38 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var37);
    java2.util2.Collection var39 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var37);
    java2.util2.Comparator var40 = java2.util2.Collections.reverseOrder();
    java.lang.Object var41 = java2.util2.Collections.min(var39, var40);
    boolean var42 = var33.removeAll(var39);
    java2.util2.SortedSet var43 = var27.headSet((java.lang.Object)var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var32.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var33.toString(),"[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10L+ "'", var41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test307() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Collection var3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.min(var3, var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.max(var3, var6);
    java.lang.Object var8 = java2.util2.Collections.max(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + 10L+ "'", var8.equals(10L));

  }

  public void test308() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Enumeration var32 = java2.util2.Collections.enumeration((java2.util2.Collection)var30);
    java2.util2.ArrayList var33 = java2.util2.Collections.list(var32);
    java2.util2.Set var35 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var36 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var35);
    java2.util2.Collection var37 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var35);
    java2.util2.Comparator var38 = java2.util2.Collections.reverseOrder();
    java.lang.Object var39 = java2.util2.Collections.min(var37, var38);
    java2.util2.Comparator var40 = java2.util2.Collections.reverseOrder();
    java.lang.Object var41 = java2.util2.Collections.max(var37, var40);
    java2.util2.Collection var42 = java2.util2.Collections.unmodifiableCollection(var37);
    java2.util2.List var43 = java2.util2.Collections.singletonList((java.lang.Object)var37);
    java2.util2.List var44 = java2.util2.Collections.unmodifiableList(var43);
    java2.util2.Collections.copy((java2.util2.List)var33, var43);
    java.lang.Object[] var46 = var33.toArray();
    java2.util2.List var47 = java2.util2.Collections.synchronizedList((java2.util2.List)var33);
    boolean var48 = var27.equals((java.lang.Object)var33);
    java2.util2.Iterator var49 = var27.iterator();
    java2.util2.Map var51 = java2.util2.Collections.singletonMap((java.lang.Object)var27, (java.lang.Object)1.0d);
    java2.util2.TreeSet var52 = new java2.util2.TreeSet((java2.util2.SortedSet)var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + 10L+ "'", var39.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10L+ "'", var41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var52.toString(),"[[10]]");

  }

  public void test309() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.TreeSet var24 = new java2.util2.TreeSet();
    java2.util2.Set var26 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var27 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var26);
    java2.util2.Comparator var28 = java2.util2.Collections.reverseOrder();
    java.lang.Object var29 = java2.util2.Collections.max(var27, var28);
    boolean var30 = var24.containsAll(var27);
    java2.util2.Comparator var31 = java2.util2.Collections.reverseOrder();
    java.lang.Object var32 = java2.util2.Collections.min(var27, var31);
    java2.util2.Set var34 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var35 = java2.util2.Collections.singleton((java.lang.Object)var34);
    java2.util2.Enumeration var36 = java2.util2.Collections.enumeration((java2.util2.Collection)var34);
    java2.util2.ArrayList var37 = java2.util2.Collections.list(var36);
    java2.util2.Collections.fill((java2.util2.List)var37, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill((java2.util2.List)var37, (java.lang.Object)0);
    boolean var42 = java2.util2.Collections.replaceAll((java2.util2.List)var4, var32, (java.lang.Object)var37);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)var37, 10, 10);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var24.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + 10L+ "'", var29.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + 10L+ "'", var32.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test310() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java2.util2.TreeSet var17 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var17);
    java2.util2.Set var20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var20);
    java2.util2.Collection var22 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var20);
    java2.util2.Comparator var23 = java2.util2.Collections.reverseOrder();
    java.lang.Object var24 = java2.util2.Collections.min(var22, var23);
    java2.util2.Comparator var25 = java2.util2.Collections.reverseOrder();
    java.lang.Object var26 = java2.util2.Collections.max(var22, var25);
    java2.util2.Collection var27 = java2.util2.Collections.unmodifiableCollection(var22);
    java2.util2.List var28 = java2.util2.Collections.singletonList((java.lang.Object)var22);
    java2.util2.Collections.copy((java2.util2.List)var4, var28);
    java2.util2.Collections.rotate((java2.util2.List)var4, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var17.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + 10L+ "'", var24.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + 10L+ "'", var26.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test311() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Iterator var29 = var27.iterator();
    java2.util2.Set var30 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var27);
    java.lang.Object var31 = var27.clone();
    java.lang.Object var32 = var27.last();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test312() throws Throwable {

    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.max(var3, var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.max(var3, var6);
    java2.util2.Map var8 = java2.util2.Collections.singletonMap((java.lang.Object)0.0d, (java.lang.Object)var3);
    java2.util2.Collection var9 = java2.util2.Collections.unmodifiableCollection(var3);
    java2.util2.Comparator var10 = java2.util2.Collections.reverseOrder();
    java.lang.Object var11 = java2.util2.Collections.min(var3, var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 10L+ "'", var11.equals(10L));

  }

  public void test313() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java2.util2.Iterator var28 = var27.iterator();
    java2.util2.TreeSet var29 = new java2.util2.TreeSet((java2.util2.SortedSet)var27);
    boolean var30 = var27.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var29.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test314() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Iterator var29 = var27.iterator();
    java2.util2.SortedSet var30 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var27);
    java2.util2.Iterator var31 = var27.iterator();
    java2.util2.Collection var32 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var27);
    java2.util2.Collection var33 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var27);
    java2.util2.Set var35 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var36 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var35);
    java2.util2.Enumeration var37 = java2.util2.Collections.enumeration((java2.util2.Collection)var35);
    java2.util2.ArrayList var38 = java2.util2.Collections.list(var37);
    java2.util2.Set var40 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var41 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var40);
    java2.util2.Collection var42 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var40);
    java2.util2.Comparator var43 = java2.util2.Collections.reverseOrder();
    java.lang.Object var44 = java2.util2.Collections.min(var42, var43);
    java2.util2.Comparator var45 = java2.util2.Collections.reverseOrder();
    java.lang.Object var46 = java2.util2.Collections.max(var42, var45);
    java2.util2.Collection var47 = java2.util2.Collections.unmodifiableCollection(var42);
    java2.util2.List var48 = java2.util2.Collections.singletonList((java.lang.Object)var42);
    java2.util2.List var49 = java2.util2.Collections.unmodifiableList(var48);
    java2.util2.Collections.copy((java2.util2.List)var38, var48);
    java.lang.Object[] var52 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var53 = var38.toArray(var52);
    java2.util2.Comparator var54 = java2.util2.Collections.reverseOrder();
    java.lang.Object var55 = java2.util2.Collections.max((java2.util2.Collection)var38, var54);
    java2.util2.Collections.sort((java2.util2.List)var38);
    boolean var57 = var27.equals((java.lang.Object)var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + 10L+ "'", var44.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + 10L+ "'", var46.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test315() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)(byte)(-1));
    java2.util2.Set var26 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var27 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var26);
    boolean var28 = var4.retainAll(var27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)var4, 0, (-1));
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);

  }

  public void test316() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var17 = var4.toArray();
    java.lang.Object[] var18 = var4.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test317() throws Throwable {

    java2.util2.List var2 = java2.util2.Collections.nCopies(100, (java.lang.Object)1);
    java2.util2.Set var5 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    java2.util2.Comparator var7 = java2.util2.Collections.reverseOrder();
    java.lang.Object var8 = java2.util2.Collections.max(var6, var7);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.max(var6, var9);
    java2.util2.Map var11 = java2.util2.Collections.singletonMap((java.lang.Object)0.0d, (java.lang.Object)var6);
    java2.util2.Collection var12 = java2.util2.Collections.unmodifiableCollection(var6);
    java2.util2.Set var14 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var14);
    java2.util2.Enumeration var16 = java2.util2.Collections.enumeration((java2.util2.Collection)var14);
    java2.util2.ArrayList var17 = java2.util2.Collections.list(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Collection var21 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var19);
    java2.util2.Comparator var22 = java2.util2.Collections.reverseOrder();
    java.lang.Object var23 = java2.util2.Collections.min(var21, var22);
    java2.util2.Comparator var24 = java2.util2.Collections.reverseOrder();
    java.lang.Object var25 = java2.util2.Collections.max(var21, var24);
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection(var21);
    java2.util2.List var27 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var28 = java2.util2.Collections.unmodifiableList(var27);
    java2.util2.Collections.copy((java2.util2.List)var17, var27);
    java.lang.Object[] var31 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var32 = var17.toArray(var31);
    java2.util2.TreeSet var33 = new java2.util2.TreeSet();
    java.lang.Object[] var35 = new java.lang.Object[] { (-1L)};
    java.lang.Object[] var36 = var33.toArray(var35);
    java2.util2.Set var38 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var39 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var38);
    java2.util2.Enumeration var40 = java2.util2.Collections.enumeration((java2.util2.Collection)var38);
    java2.util2.ArrayList var41 = java2.util2.Collections.list(var40);
    java2.util2.Set var43 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var44 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var43);
    java2.util2.Collection var45 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var43);
    java2.util2.Comparator var46 = java2.util2.Collections.reverseOrder();
    java.lang.Object var47 = java2.util2.Collections.min(var45, var46);
    java2.util2.Comparator var48 = java2.util2.Collections.reverseOrder();
    java.lang.Object var49 = java2.util2.Collections.max(var45, var48);
    java2.util2.Collection var50 = java2.util2.Collections.unmodifiableCollection(var45);
    java2.util2.List var51 = java2.util2.Collections.singletonList((java.lang.Object)var45);
    java2.util2.List var52 = java2.util2.Collections.unmodifiableList(var51);
    java2.util2.Collections.copy((java2.util2.List)var41, var51);
    java.lang.Object[] var55 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var56 = var41.toArray(var55);
    boolean var57 = java2.util2.Collections.replaceAll((java2.util2.List)var17, (java.lang.Object)var36, (java.lang.Object)var55);
    boolean var58 = java2.util2.Collections.replaceAll(var2, (java.lang.Object)var12, (java.lang.Object)var17);
    java.lang.Object[] var59 = var17.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + 10L+ "'", var8.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + 10L+ "'", var23.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + 10L+ "'", var25.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var33.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + 10L+ "'", var47.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + 10L+ "'", var49.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test318() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    java2.util2.Iterator var29 = var27.iterator();
    boolean var30 = var27.isEmpty();
    java2.util2.Set var31 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var27);
    java2.util2.TreeSet var32 = new java2.util2.TreeSet((java2.util2.SortedSet)var27);
    java.lang.Object var33 = var27.last();
    java2.util2.Set var34 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var27);
    java2.util2.Set var36 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var37 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var36);
    java2.util2.Enumeration var38 = java2.util2.Collections.enumeration((java2.util2.Collection)var36);
    java2.util2.ArrayList var39 = java2.util2.Collections.list(var38);
    java2.util2.Set var41 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var42 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var41);
    java2.util2.Collection var43 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var41);
    java2.util2.Comparator var44 = java2.util2.Collections.reverseOrder();
    java.lang.Object var45 = java2.util2.Collections.min(var43, var44);
    java2.util2.Comparator var46 = java2.util2.Collections.reverseOrder();
    java.lang.Object var47 = java2.util2.Collections.max(var43, var46);
    java2.util2.Collection var48 = java2.util2.Collections.unmodifiableCollection(var43);
    java2.util2.List var49 = java2.util2.Collections.singletonList((java.lang.Object)var43);
    java2.util2.List var50 = java2.util2.Collections.unmodifiableList(var49);
    java2.util2.Collections.copy((java2.util2.List)var39, var49);
    java.lang.Object[] var53 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var54 = var39.toArray(var53);
    boolean var57 = java2.util2.Collections.replaceAll((java2.util2.List)var39, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var58 = var39.toString();
    java2.util2.List var59 = java2.util2.Collections.unmodifiableList((java2.util2.List)var39);
    java.lang.String var60 = var39.toString();
    java2.util2.Collection var61 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var39);
    java2.util2.TreeSet var62 = new java2.util2.TreeSet(var61);
    java2.util2.Iterator var63 = var62.iterator();
    java2.util2.Set var65 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var66 = java2.util2.Collections.singleton((java.lang.Object)var65);
    java2.util2.Enumeration var67 = java2.util2.Collections.enumeration((java2.util2.Collection)var65);
    java2.util2.ArrayList var68 = java2.util2.Collections.list(var67);
    java2.util2.Collections.fill((java2.util2.List)var68, (java.lang.Object)(-1.0d));
    java2.util2.SortedSet var71 = var62.headSet((java.lang.Object)(-1.0d));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var72 = var27.add((java.lang.Object)var62);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var32.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + 10L+ "'", var45.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + 10L+ "'", var47.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "[[10]]"+ "'", var58.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "[[10]]"+ "'", var60.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var62.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test319() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 100.0d};
    java.lang.Object[] var19 = var4.toArray(var18);
    boolean var22 = java2.util2.Collections.replaceAll((java2.util2.List)var4, (java.lang.Object)"hi!", (java.lang.Object)(-1.0f));
    java.lang.String var23 = var4.toString();
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java.lang.String var25 = var4.toString();
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet(var26);
    java.lang.Object var28 = var27.clone();
    int var29 = var27.size();
    java.lang.Object var30 = var27.clone();
    java2.util2.Set var31 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)var27);
    java.lang.Object var32 = var27.first();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var34 = var27.add((java.lang.Object)1);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[[10]]"+ "'", var23.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[[10]]"+ "'", var25.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size()  == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(),"[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test320() throws Throwable {

    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var8, var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max(var8, var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var14);
    java2.util2.Collections.copy((java2.util2.List)var4, var14);
    java2.util2.TreeSet var17 = new java2.util2.TreeSet();
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var17);
    java2.util2.Set var20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var20);
    java2.util2.Collection var22 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var20);
    java2.util2.Comparator var23 = java2.util2.Collections.reverseOrder();
    java.lang.Object var24 = java2.util2.Collections.min(var22, var23);
    java2.util2.Comparator var25 = java2.util2.Collections.reverseOrder();
    java.lang.Object var26 = java2.util2.Collections.max(var22, var25);
    java2.util2.Collection var27 = java2.util2.Collections.unmodifiableCollection(var22);
    java2.util2.List var28 = java2.util2.Collections.singletonList((java.lang.Object)var22);
    java2.util2.Collections.copy((java2.util2.List)var4, var28);
    java2.util2.List var30 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java2.util2.List var31 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java2.util2.Comparator var32 = java2.util2.Collections.reverseOrder();
    java.lang.Object var33 = java2.util2.Collections.min((java2.util2.Collection)var31, var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 10L+ "'", var12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.size()  == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var17.toString(),"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + 10L+ "'", var24.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + 10L+ "'", var26.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

}
